# Generated from milestone_2.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0099")
        buf.write("\u065b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\3")
        buf.write("\2\7\2\u00f4\n\2\f\2\16\2\u00f7\13\2\3\3\7\3\u00fa\n\3")
        buf.write("\f\3\16\3\u00fd\13\3\3\3\3\3\3\3\5\3\u0102\n\3\3\4\3\4")
        buf.write("\5\4\u0106\n\4\3\5\3\5\5\5\u010a\n\5\3\6\3\6\5\6\u010e")
        buf.write("\n\6\3\7\3\7\5\7\u0112\n\7\3\b\3\b\3\t\3\t\3\n\5\n\u0119")
        buf.write("\n\n\3\n\5\n\u011c\n\n\3\13\3\13\3\13\3\13\5\13\u0122")
        buf.write("\n\13\3\f\3\f\3\f\3\f\3\f\7\f\u0129\n\f\f\f\16\f\u012c")
        buf.write("\13\f\3\f\5\f\u012f\n\f\3\r\3\r\3\r\3\r\3\r\7\r\u0136")
        buf.write("\n\r\f\r\16\r\u0139\13\r\3\16\3\16\3\16\3\16\3\16\7\16")
        buf.write("\u0140\n\16\f\16\16\16\u0143\13\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\7\17\u014a\n\17\f\17\16\17\u014d\13\17\3\20\3\20")
        buf.write("\3\20\3\20\3\20\7\20\u0154\n\20\f\20\16\20\u0157\13\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\7\21\u015e\n\21\f\21\16\21\u0161")
        buf.write("\13\21\3\22\3\22\3\22\3\22\3\22\7\22\u0168\n\22\f\22\16")
        buf.write("\22\u016b\13\22\3\23\3\23\3\23\3\23\3\23\7\23\u0172\n")
        buf.write("\23\f\23\16\23\u0175\13\23\3\24\3\24\3\24\3\24\3\24\7")
        buf.write("\24\u017c\n\24\f\24\16\24\u017f\13\24\3\25\3\25\3\25\3")
        buf.write("\25\3\25\7\25\u0186\n\25\f\25\16\25\u0189\13\25\3\26\3")
        buf.write("\26\3\26\3\26\3\26\7\26\u0190\n\26\f\26\16\26\u0193\13")
        buf.write("\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\6\30\u01a3\n\30\r\30\16\30\u01a4")
        buf.write("\6\30\u01a7\n\30\r\30\16\30\u01a8\3\30\3\30\3\30\5\30")
        buf.write("\u01ae\n\30\3\31\3\31\3\31\3\31\5\31\u01b4\n\31\3\32\6")
        buf.write("\32\u01b7\n\32\r\32\16\32\u01b8\3\32\3\32\3\33\3\33\3")
        buf.write("\33\3\33\7\33\u01c1\n\33\f\33\16\33\u01c4\13\33\3\33\5")
        buf.write("\33\u01c7\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\5\34\u01d1\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5")
        buf.write("\35\u01da\n\35\3\36\3\36\3\36\3\36\3\36\5\36\u01e1\n\36")
        buf.write("\3\37\3\37\3\37\3\37\7\37\u01e7\n\37\f\37\16\37\u01ea")
        buf.write("\13\37\3\37\5\37\u01ed\n\37\3\37\3\37\3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\6\"\u0204")
        buf.write("\n\"\r\"\16\"\u0205\3\"\3\"\3\"\3\"\6\"\u020c\n\"\r\"")
        buf.write("\16\"\u020d\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\6\"\u0218")
        buf.write("\n\"\r\"\16\"\u0219\3\"\3\"\5\"\u021e\n\"\3\"\3\"\3\"")
        buf.write("\3\"\6\"\u0224\n\"\r\"\16\"\u0225\3\"\3\"\5\"\u022a\n")
        buf.write("\"\5\"\u022c\n\"\5\"\u022e\n\"\3\"\3\"\3\"\3#\3#\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\5$\u023c\n$\3%\3%\3%\3%\5%\u0242\n%\7")
        buf.write("%\u0244\n%\f%\16%\u0247\13%\3%\3%\3%\3&\3&\3&\3&\5&\u0250")
        buf.write("\n&\7&\u0252\n&\f&\16&\u0255\13&\3&\3&\3&\3\'\3\'\3\'")
        buf.write("\5\'\u025d\n\'\7\'\u025f\n\'\f\'\16\'\u0262\13\'\3\'\3")
        buf.write("\'\5\'\u0266\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u026d\n\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0276\n\'\3\'\5\'\u0279\n")
        buf.write("\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(\u0285\n(\f(\16(\u0288")
        buf.write("\13(\3(\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3+\5+\u0298")
        buf.write("\n+\7+\u029a\n+\f+\16+\u029d\13+\3+\3+\3+\3,\3,\5,\u02a4")
        buf.write("\n,\3-\3-\3-\3-\3-\5-\u02ab\n-\3.\3.\5.\u02af\n.\3/\3")
        buf.write("/\5/\u02b3\n/\3\60\3\60\3\60\3\60\7\60\u02b9\n\60\f\60")
        buf.write("\16\60\u02bc\13\60\3\60\5\60\u02bf\n\60\3\60\3\60\3\60")
        buf.write("\3\60\5\60\u02c5\n\60\3\60\3\60\3\60\3\60\5\60\u02cb\n")
        buf.write("\60\3\61\3\61\3\61\3\61\7\61\u02d1\n\61\f\61\16\61\u02d4")
        buf.write("\13\61\3\61\5\61\u02d7\n\61\3\61\3\61\3\61\3\61\5\61\u02dd")
        buf.write("\n\61\3\61\3\61\3\61\3\61\5\61\u02e3\n\61\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\5\62\u02eb\n\62\7\62\u02ed\n\62\f\62")
        buf.write("\16\62\u02f0\13\62\3\62\3\62\3\62\3\63\3\63\5\63\u02f7")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u02ff\n\63\f")
        buf.write("\63\16\63\u0302\13\63\5\63\u0304\n\63\3\64\3\64\3\65\3")
        buf.write("\65\7\65\u030a\n\65\f\65\16\65\u030d\13\65\3\65\3\65\5")
        buf.write("\65\u0311\n\65\3\65\3\65\3\66\5\66\u0316\n\66\3\66\3\66")
        buf.write("\3\66\3\66\5\66\u031c\n\66\3\67\5\67\u031f\n\67\3\67\3")
        buf.write("\67\3\67\3\67\5\67\u0325\n\67\38\38\38\58\u032a\n8\38")
        buf.write("\38\38\39\39\39\59\u0332\n9\39\39\59\u0336\n9\39\59\u0339")
        buf.write("\n9\3:\3:\3:\3:\3;\3;\6;\u0341\n;\r;\16;\u0342\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3<\3<\3=\3=\3=\3=\3=\3=\5=\u0354\n=\3=\5")
        buf.write("=\u0357\n=\3>\3>\3?\7?\u035c\n?\f?\16?\u035f\13?\3?\3")
        buf.write("?\7?\u0363\n?\f?\16?\u0366\13?\3?\3?\5?\u036a\n?\3@\3")
        buf.write("@\3A\3A\3A\5A\u0371\nA\3B\3B\5B\u0375\nB\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\7B\u0394\nB\fB\16B\u0397\13B\3C\3")
        buf.write("C\3C\3C\3C\5C\u039e\nC\3C\6C\u03a1\nC\rC\16C\u03a2\3C")
        buf.write("\3C\3C\5C\u03a8\nC\3D\3D\3D\3D\3D\3D\7D\u03b0\nD\fD\16")
        buf.write("D\u03b3\13D\3D\3D\3D\6D\u03b8\nD\rD\16D\u03b9\3D\3D\5")
        buf.write("D\u03be\nD\3E\3E\3E\6E\u03c3\nE\rE\16E\u03c4\3E\3E\3F")
        buf.write("\3F\3F\3F\3F\3F\3F\3F\7F\u03d1\nF\fF\16F\u03d4\13F\3G")
        buf.write("\3G\3G\5G\u03d9\nG\3H\3H\3H\5H\u03de\nH\3I\3I\3I\5I\u03e3")
        buf.write("\nI\3J\3J\3J\5J\u03e8\nJ\3K\3K\3K\5K\u03ed\nK\3L\3L\3")
        buf.write("L\5L\u03f2\nL\3M\3M\3M\3M\5M\u03f8\nM\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\7M\u0401\nM\fM\16M\u0404\13M\3M\3M\3M\3M\3M\3M\5")
        buf.write("M\u040c\nM\3N\3N\3N\3O\3O\3O\3P\3P\3P\3P\3P\3Q\3Q\3Q\3")
        buf.write("Q\3Q\3R\3R\3R\3R\7R\u0422\nR\fR\16R\u0425\13R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\7R\u042e\nR\fR\16R\u0431\13R\3R\3R\3R\3")
        buf.write("R\3R\3R\5R\u0439\nR\3S\3S\3S\5S\u043e\nS\3S\5S\u0441\n")
        buf.write("S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u044b\nS\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\5T\u0455\nT\3T\3T\3T\3T\3T\3T\3T\7T\u045e\nT\f")
        buf.write("T\16T\u0461\13T\3T\3T\3T\3T\3T\3T\5T\u0469\nT\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\5U\u0473\nU\3U\3U\3U\3U\3U\3U\7U\u047b")
        buf.write("\nU\fU\16U\u047e\13U\3U\3U\3U\3U\3U\5U\u0485\nU\3V\3V")
        buf.write("\3V\3V\3W\3W\5W\u048d\nW\3W\3W\3W\3X\3X\5X\u0494\nX\3")
        buf.write("X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3[\3[\5[\u04a3\n[\3[\3")
        buf.write("[\3\\\3\\\3\\\3\\\7\\\u04ab\n\\\f\\\16\\\u04ae\13\\\3")
        buf.write("\\\3\\\3\\\5\\\u04b3\n\\\3\\\3\\\3\\\3\\\5\\\u04b9\n\\")
        buf.write("\3]\3]\3]\7]\u04be\n]\f]\16]\u04c1\13]\3]\3]\5]\u04c5")
        buf.write("\n]\3]\3]\3]\3^\3^\3^\3^\3_\3_\3_\5_\u04d1\n_\3_\5_\u04d4")
        buf.write("\n_\5_\u04d6\n_\3`\3`\3`\5`\u04db\n`\3`\5`\u04de\n`\3")
        buf.write("`\3`\5`\u04e2\n`\3`\3`\5`\u04e6\n`\3`\5`\u04e9\n`\3`\3")
        buf.write("`\3a\3a\3b\5b\u04f0\nb\3b\3b\3b\3b\3b\6b\u04f7\nb\rb\16")
        buf.write("b\u04f8\3b\3b\3b\5b\u04fe\nb\3c\5c\u0501\nc\3c\3c\3c\3")
        buf.write("c\3c\6c\u0508\nc\rc\16c\u0509\3c\3c\3c\5c\u050f\nc\3d")
        buf.write("\5d\u0512\nd\3d\3d\3d\3d\3d\6d\u0519\nd\rd\16d\u051a\3")
        buf.write("d\3d\3d\5d\u0520\nd\3e\3e\3e\3e\5e\u0526\ne\3e\3e\3e\3")
        buf.write("e\3e\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0535\nf\5f\u0537\nf\3")
        buf.write("f\5f\u053a\nf\6f\u053c\nf\rf\16f\u053d\3g\3g\3g\3g\3g")
        buf.write("\5g\u0545\ng\3g\3g\3g\3g\3g\5g\u054c\ng\7g\u054e\ng\f")
        buf.write("g\16g\u0551\13g\3g\3g\3g\3g\5g\u0557\ng\5g\u0559\ng\3")
        buf.write("h\3h\3h\3h\3h\3i\3i\3i\3i\7i\u0564\ni\fi\16i\u0567\13")
        buf.write("i\3i\3i\3i\3i\3i\3i\3i\7i\u0570\ni\fi\16i\u0573\13i\3")
        buf.write("i\3i\3i\3i\3i\3i\5i\u057b\ni\3j\3j\3j\3j\3j\5j\u0582\n")
        buf.write("j\3j\5j\u0585\nj\3j\3j\3j\3j\3j\3j\3j\3j\5j\u058f\nj\3")
        buf.write("k\3k\3k\6k\u0594\nk\rk\16k\u0595\3k\3k\3k\3k\3k\3k\3k")
        buf.write("\3k\3k\5k\u05a1\nk\3l\3l\5l\u05a5\nl\3l\3l\5l\u05a9\n")
        buf.write("l\3l\5l\u05ac\nl\3l\3l\3m\5m\u05b1\nm\3m\3m\3n\7n\u05b6")
        buf.write("\nn\fn\16n\u05b9\13n\3n\3n\5n\u05bd\nn\3n\3n\7n\u05c1")
        buf.write("\nn\fn\16n\u05c4\13n\3n\5n\u05c7\nn\3n\3n\3n\3n\3o\3o")
        buf.write("\5o\u05cf\no\3o\3o\3o\3o\5o\u05d5\no\3p\3p\3p\6p\u05da")
        buf.write("\np\rp\16p\u05db\3p\3p\3p\3p\3p\3p\3p\3q\3q\3q\5q\u05e8")
        buf.write("\nq\3r\3r\5r\u05ec\nr\3r\5r\u05ef\nr\3r\3r\3s\3s\3s\6")
        buf.write("s\u05f6\ns\rs\16s\u05f7\3s\3s\3t\3t\3t\6t\u05ff\nt\rt")
        buf.write("\16t\u0600\3t\3t\3u\3u\3u\5u\u0608\nu\3u\5u\u060b\nu\3")
        buf.write("v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0618\nv\3v\5v\u061b")
        buf.write("\nv\3v\5v\u061e\nv\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3")
        buf.write("w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\5")
        buf.write("w\u063d\nw\3w\5w\u0640\nw\3x\3x\3x\6x\u0645\nx\rx\16x")
        buf.write("\u0646\3x\3x\3x\5x\u064c\nx\3x\3x\3x\6x\u0651\nx\rx\16")
        buf.write("x\u0652\3x\3x\5x\u0657\nx\3y\3y\3y\2\2z\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\2\f\r")
        buf.write("\2\3\3\r\r\34\34\36\37!\")+\63\6388FFIJ\u008b\u0094\b")
        buf.write("\2\35\35hkooqz\u0085\u0085\u0087\u0087\17\2\f\f\21\21")
        buf.write("\23\23\26\26\33\33--\61\62\66\66>>@ADDGGLL\3\2lm\4\2\b")
        buf.write("\b^^\13\2\n\n\f\f  #%\'\'..\67\67==KK\3\2hj\4\2\f\f##")
        buf.write("\5\2\f\f\60\60LL\6\2\34\3488MQUU\2\u06e7\2\u00f5\3\2\2")
        buf.write("\2\4\u00fb\3\2\2\2\6\u0103\3\2\2\2\b\u0107\3\2\2\2\n\u010b")
        buf.write("\3\2\2\2\f\u010f\3\2\2\2\16\u0113\3\2\2\2\20\u0115\3\2")
        buf.write("\2\2\22\u0118\3\2\2\2\24\u0121\3\2\2\2\26\u0123\3\2\2")
        buf.write("\2\30\u0130\3\2\2\2\32\u013a\3\2\2\2\34\u0144\3\2\2\2")
        buf.write("\36\u014e\3\2\2\2 \u0158\3\2\2\2\"\u0162\3\2\2\2$\u016c")
        buf.write("\3\2\2\2&\u0176\3\2\2\2(\u0180\3\2\2\2*\u018a\3\2\2\2")
        buf.write(",\u0194\3\2\2\2.\u01ad\3\2\2\2\60\u01af\3\2\2\2\62\u01b6")
        buf.write("\3\2\2\2\64\u01bc\3\2\2\2\66\u01c8\3\2\2\28\u01d2\3\2")
        buf.write("\2\2:\u01db\3\2\2\2<\u01e2\3\2\2\2>\u01f0\3\2\2\2@\u01fc")
        buf.write("\3\2\2\2B\u01fe\3\2\2\2D\u0232\3\2\2\2F\u023b\3\2\2\2")
        buf.write("H\u023d\3\2\2\2J\u024b\3\2\2\2L\u0278\3\2\2\2N\u027a\3")
        buf.write("\2\2\2P\u028d\3\2\2\2R\u0290\3\2\2\2T\u0293\3\2\2\2V\u02a1")
        buf.write("\3\2\2\2X\u02a5\3\2\2\2Z\u02ac\3\2\2\2\\\u02b0\3\2\2\2")
        buf.write("^\u02b4\3\2\2\2`\u02cc\3\2\2\2b\u02e4\3\2\2\2d\u02f4\3")
        buf.write("\2\2\2f\u0305\3\2\2\2h\u0307\3\2\2\2j\u0315\3\2\2\2l\u031e")
        buf.write("\3\2\2\2n\u0326\3\2\2\2p\u032e\3\2\2\2r\u033a\3\2\2\2")
        buf.write("t\u033e\3\2\2\2v\u034b\3\2\2\2x\u0356\3\2\2\2z\u0358\3")
        buf.write("\2\2\2|\u0369\3\2\2\2~\u036b\3\2\2\2\u0080\u0370\3\2\2")
        buf.write("\2\u0082\u0372\3\2\2\2\u0084\u0398\3\2\2\2\u0086\u03a9")
        buf.write("\3\2\2\2\u0088\u03bf\3\2\2\2\u008a\u03c8\3\2\2\2\u008c")
        buf.write("\u03d5\3\2\2\2\u008e\u03da\3\2\2\2\u0090\u03df\3\2\2\2")
        buf.write("\u0092\u03e4\3\2\2\2\u0094\u03e9\3\2\2\2\u0096\u03ee\3")
        buf.write("\2\2\2\u0098\u03f3\3\2\2\2\u009a\u040d\3\2\2\2\u009c\u0410")
        buf.write("\3\2\2\2\u009e\u0413\3\2\2\2\u00a0\u0418\3\2\2\2\u00a2")
        buf.write("\u041d\3\2\2\2\u00a4\u043a\3\2\2\2\u00a6\u044c\3\2\2\2")
        buf.write("\u00a8\u046a\3\2\2\2\u00aa\u0486\3\2\2\2\u00ac\u048a\3")
        buf.write("\2\2\2\u00ae\u0491\3\2\2\2\u00b0\u0498\3\2\2\2\u00b2\u049c")
        buf.write("\3\2\2\2\u00b4\u04a0\3\2\2\2\u00b6\u04a6\3\2\2\2\u00b8")
        buf.write("\u04ba\3\2\2\2\u00ba\u04c9\3\2\2\2\u00bc\u04d5\3\2\2\2")
        buf.write("\u00be\u04d7\3\2\2\2\u00c0\u04ec\3\2\2\2\u00c2\u04fd\3")
        buf.write("\2\2\2\u00c4\u050e\3\2\2\2\u00c6\u051f\3\2\2\2\u00c8\u0521")
        buf.write("\3\2\2\2\u00ca\u052c\3\2\2\2\u00cc\u053f\3\2\2\2\u00ce")
        buf.write("\u055a\3\2\2\2\u00d0\u055f\3\2\2\2\u00d2\u057c\3\2\2\2")
        buf.write("\u00d4\u05a0\3\2\2\2\u00d6\u05a2\3\2\2\2\u00d8\u05b0\3")
        buf.write("\2\2\2\u00da\u05b7\3\2\2\2\u00dc\u05cc\3\2\2\2\u00de\u05d6")
        buf.write("\3\2\2\2\u00e0\u05e4\3\2\2\2\u00e2\u05eb\3\2\2\2\u00e4")
        buf.write("\u05f2\3\2\2\2\u00e6\u05fb\3\2\2\2\u00e8\u0604\3\2\2\2")
        buf.write("\u00ea\u061a\3\2\2\2\u00ec\u063f\3\2\2\2\u00ee\u0656\3")
        buf.write("\2\2\2\u00f0\u0658\3\2\2\2\u00f2\u00f4\5\4\3\2\u00f3\u00f2")
        buf.write("\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5")
        buf.write("\u00f6\3\2\2\2\u00f6\3\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8")
        buf.write("\u00fa\5\u00eex\2\u00f9\u00f8\3\2\2\2\u00fa\u00fd\3\2")
        buf.write("\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u0101")
        buf.write("\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\u0102\7d\2\2\u00ff")
        buf.write("\u0100\7\u0096\2\2\u0100\u0102\b\3\1\2\u0101\u00fe\3\2")
        buf.write("\2\2\u0101\u00ff\3\2\2\2\u0102\5\3\2\2\2\u0103\u0105\7")
        buf.write("c\2\2\u0104\u0106\7e\2\2\u0105\u0104\3\2\2\2\u0105\u0106")
        buf.write("\3\2\2\2\u0106\7\3\2\2\2\u0107\u0109\7d\2\2\u0108\u010a")
        buf.write("\7e\2\2\u0109\u0108\3\2\2\2\u0109\u010a\3\2\2\2\u010a")
        buf.write("\t\3\2\2\2\u010b\u010d\7\\\2\2\u010c\u010e\7e\2\2\u010d")
        buf.write("\u010c\3\2\2\2\u010d\u010e\3\2\2\2\u010e\13\3\2\2\2\u010f")
        buf.write("\u0111\7\\\2\2\u0110\u0112\7e\2\2\u0111\u0110\3\2\2\2")
        buf.write("\u0111\u0112\3\2\2\2\u0112\r\3\2\2\2\u0113\u0114\t\2\2")
        buf.write("\2\u0114\17\3\2\2\2\u0115\u0116\5\16\b\2\u0116\21\3\2")
        buf.write("\2\2\u0117\u0119\7e\2\2\u0118\u0117\3\2\2\2\u0118\u0119")
        buf.write("\3\2\2\2\u0119\u011b\3\2\2\2\u011a\u011c\7\u0096\2\2\u011b")
        buf.write("\u011a\3\2\2\2\u011b\u011c\3\2\2\2\u011c\23\3\2\2\2\u011d")
        buf.write("\u011e\7\u0096\2\2\u011e\u0122\b\13\1\2\u011f\u0120\7")
        buf.write("\u0096\2\2\u0120\u0122\b\13\1\2\u0121\u011d\3\2\2\2\u0121")
        buf.write("\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\25\3\2\2\2\u0123")
        buf.write("\u012a\5\30\r\2\u0124\u0125\7\u0094\2\2\u0125\u0126\5")
        buf.write("\22\n\2\u0126\u0127\5\30\r\2\u0127\u0129\3\2\2\2\u0128")
        buf.write("\u0124\3\2\2\2\u0129\u012c\3\2\2\2\u012a\u0128\3\2\2\2")
        buf.write("\u012a\u012b\3\2\2\2\u012b\u012e\3\2\2\2\u012c\u012a\3")
        buf.write("\2\2\2\u012d\u012f\5T+\2\u012e\u012d\3\2\2\2\u012e\u012f")
        buf.write("\3\2\2\2\u012f\27\3\2\2\2\u0130\u0137\5\32\16\2\u0131")
        buf.write("\u0132\7\u0093\2\2\u0132\u0133\5\22\n\2\u0133\u0134\5")
        buf.write("\32\16\2\u0134\u0136\3\2\2\2\u0135\u0131\3\2\2\2\u0136")
        buf.write("\u0139\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\31\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u0141\5\34")
        buf.write("\17\2\u013b\u013c\7\u0092\2\2\u013c\u013d\5\22\n\2\u013d")
        buf.write("\u013e\5\34\17\2\u013e\u0140\3\2\2\2\u013f\u013b\3\2\2")
        buf.write("\2\u0140\u0143\3\2\2\2\u0141\u013f\3\2\2\2\u0141\u0142")
        buf.write("\3\2\2\2\u0142\33\3\2\2\2\u0143\u0141\3\2\2\2\u0144\u014b")
        buf.write("\5\36\20\2\u0145\u0146\7\u0091\2\2\u0146\u0147\5\22\n")
        buf.write("\2\u0147\u0148\5\36\20\2\u0148\u014a\3\2\2\2\u0149\u0145")
        buf.write("\3\2\2\2\u014a\u014d\3\2\2\2\u014b\u0149\3\2\2\2\u014b")
        buf.write("\u014c\3\2\2\2\u014c\35\3\2\2\2\u014d\u014b\3\2\2\2\u014e")
        buf.write("\u0155\5 \21\2\u014f\u0150\7\u0090\2\2\u0150\u0151\5\22")
        buf.write("\n\2\u0151\u0152\5 \21\2\u0152\u0154\3\2\2\2\u0153\u014f")
        buf.write("\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\37\3\2\2\2\u0157\u0155\3\2\2\2\u0158")
        buf.write("\u015f\5\"\22\2\u0159\u015a\7\u008f\2\2\u015a\u015b\5")
        buf.write("\22\n\2\u015b\u015c\5\"\22\2\u015c\u015e\3\2\2\2\u015d")
        buf.write("\u0159\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3\2\2\2")
        buf.write("\u015f\u0160\3\2\2\2\u0160!\3\2\2\2\u0161\u015f\3\2\2")
        buf.write("\2\u0162\u0169\5$\23\2\u0163\u0164\7\u008e\2\2\u0164\u0165")
        buf.write("\5\22\n\2\u0165\u0166\5$\23\2\u0166\u0168\3\2\2\2\u0167")
        buf.write("\u0163\3\2\2\2\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2")
        buf.write("\u0169\u016a\3\2\2\2\u016a#\3\2\2\2\u016b\u0169\3\2\2")
        buf.write("\2\u016c\u0173\5&\24\2\u016d\u016e\7\u008d\2\2\u016e\u016f")
        buf.write("\5\22\n\2\u016f\u0170\5&\24\2\u0170\u0172\3\2\2\2\u0171")
        buf.write("\u016d\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171\3\2\2\2")
        buf.write("\u0173\u0174\3\2\2\2\u0174%\3\2\2\2\u0175\u0173\3\2\2")
        buf.write("\2\u0176\u017d\5(\25\2\u0177\u0178\7\u008c\2\2\u0178\u0179")
        buf.write("\5\22\n\2\u0179\u017a\5(\25\2\u017a\u017c\3\2\2\2\u017b")
        buf.write("\u0177\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b\3\2\2\2")
        buf.write("\u017d\u017e\3\2\2\2\u017e\'\3\2\2\2\u017f\u017d\3\2\2")
        buf.write("\2\u0180\u0187\5*\26\2\u0181\u0182\7\u008b\2\2\u0182\u0183")
        buf.write("\5\22\n\2\u0183\u0184\5*\26\2\u0184\u0186\3\2\2\2\u0185")
        buf.write("\u0181\3\2\2\2\u0186\u0189\3\2\2\2\u0187\u0185\3\2\2\2")
        buf.write("\u0187\u0188\3\2\2\2\u0188)\3\2\2\2\u0189\u0187\3\2\2")
        buf.write("\2\u018a\u0191\5|?\2\u018b\u018c\7\u008a\2\2\u018c\u018d")
        buf.write("\5\22\n\2\u018d\u018e\5|?\2\u018e\u0190\3\2\2\2\u018f")
        buf.write("\u018b\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f\3\2\2\2")
        buf.write("\u0191\u0192\3\2\2\2\u0192+\3\2\2\2\u0193\u0191\3\2\2")
        buf.write("\2\u0194\u0195\t\3\2\2\u0195-\3\2\2\2\u0196\u01a6\7\4")
        buf.write("\2\2\u0197\u01a7\7\u0098\2\2\u0198\u01a7\7\u0099\2\2\u0199")
        buf.write("\u01a7\5,\27\2\u019a\u01a3\5\16\b\2\u019b\u01a3\7_\2\2")
        buf.write("\u019c\u01a3\7`\2\2\u019d\u01a3\7a\2\2\u019e\u01a3\7b")
        buf.write("\2\2\u019f\u01a3\7]\2\2\u01a0\u01a3\7^\2\2\u01a1\u01a3")
        buf.write("\7\5\2\2\u01a2\u019a\3\2\2\2\u01a2\u019b\3\2\2\2\u01a2")
        buf.write("\u019c\3\2\2\2\u01a2\u019d\3\2\2\2\u01a2\u019e\3\2\2\2")
        buf.write("\u01a2\u019f\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a2\u01a1\3")
        buf.write("\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5")
        buf.write("\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6\u0197\3\2\2\2\u01a6")
        buf.write("\u0198\3\2\2\2\u01a6\u0199\3\2\2\2\u01a6\u01a2\3\2\2\2")
        buf.write("\u01a7\u01a8\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9\3")
        buf.write("\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ae\7\4\2\2\u01ab\u01ae")
        buf.write("\7\u0099\2\2\u01ac\u01ae\7\u0098\2\2\u01ad\u0196\3\2\2")
        buf.write("\2\u01ad\u01ab\3\2\2\2\u01ad\u01ac\3\2\2\2\u01ae/\3\2")
        buf.write("\2\2\u01af\u01b3\5x=\2\u01b0\u01b4\7\\\2\2\u01b1\u01b2")
        buf.write("\7\5\2\2\u01b2\u01b4\5x=\2\u01b3\u01b0\3\2\2\2\u01b3\u01b1")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\61\3\2\2\2\u01b5\u01b7")
        buf.write("\5x=\2\u01b6\u01b5\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b6")
        buf.write("\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba")
        buf.write("\u01bb\5\6\4\2\u01bb\63\3\2\2\2\u01bc\u01c2\5\60\31\2")
        buf.write("\u01bd\u01be\5\6\4\2\u01be\u01bf\5\60\31\2\u01bf\u01c1")
        buf.write("\3\2\2\2\u01c0\u01bd\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2")
        buf.write("\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c6\3\2\2\2")
        buf.write("\u01c4\u01c2\3\2\2\2\u01c5\u01c7\5\6\4\2\u01c6\u01c5\3")
        buf.write("\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\65\3\2\2\2\u01c8\u01c9")
        buf.write("\5x=\2\u01c9\u01ca\7[\2\2\u01ca\u01d0\5\22\n\2\u01cb\u01d1")
        buf.write("\5.\30\2\u01cc\u01cd\7\6\2\2\u01cd\u01ce\5\62\32\2\u01ce")
        buf.write("\u01cf\7b\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01cb\3\2\2\2")
        buf.write("\u01d0\u01cc\3\2\2\2\u01d1\67\3\2\2\2\u01d2\u01d3\7\6")
        buf.write("\2\2\u01d3\u01d4\5\62\32\2\u01d4\u01d9\7b\2\2\u01d5\u01d6")
        buf.write("\7_\2\2\u01d6\u01d7\5\60\31\2\u01d7\u01d8\7`\2\2\u01d8")
        buf.write("\u01da\3\2\2\2\u01d9\u01d5\3\2\2\2\u01d9\u01da\3\2\2\2")
        buf.write("\u01da9\3\2\2\2\u01db\u01e0\5.\30\2\u01dc\u01dd\7[\2\2")
        buf.write("\u01dd\u01de\5\22\n\2\u01de\u01df\5.\30\2\u01df\u01e1")
        buf.write("\3\2\2\2\u01e0\u01dc\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1")
        buf.write(";\3\2\2\2\u01e2\u01ec\7]\2\2\u01e3\u01e4\5\60\31\2\u01e4")
        buf.write("\u01e5\5\6\4\2\u01e5\u01e7\3\2\2\2\u01e6\u01e3\3\2\2\2")
        buf.write("\u01e7\u01ea\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e8\u01e9\3")
        buf.write("\2\2\2\u01e9\u01ed\3\2\2\2\u01ea\u01e8\3\2\2\2\u01eb\u01ed")
        buf.write("\7\\\2\2\u01ec\u01e8\3\2\2\2\u01ec\u01eb\3\2\2\2\u01ed")
        buf.write("\u01ee\3\2\2\2\u01ee\u01ef\7^\2\2\u01ef=\3\2\2\2\u01f0")
        buf.write("\u01f1\7\24\2\2\u01f1\u01f2\7a\2\2\u01f2\u01f3\5\22\n")
        buf.write("\2\u01f3\u01f4\5~@\2\u01f4\u01f5\5\24\13\2\u01f5\u01f6")
        buf.write("\7b\2\2\u01f6\u01f7\7_\2\2\u01f7\u01f8\5\22\n\2\u01f8")
        buf.write("\u01f9\5x=\2\u01f9\u01fa\5\24\13\2\u01fa\u01fb\7`\2\2")
        buf.write("\u01fb?\3\2\2\2\u01fc\u01fd\t\4\2\2\u01fdA\3\2\2\2\u01fe")
        buf.write("\u01ff\7_\2\2\u01ff\u022d\5\22\n\2\u0200\u0201\7T\2\2")
        buf.write("\u0201\u0203\5@!\2\u0202\u0204\5\u00ecw\2\u0203\u0202")
        buf.write("\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0203\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0208\7d\2\2")
        buf.write("\u0208\u022e\3\2\2\2\u0209\u020b\7d\2\2\u020a\u020c\5")
        buf.write("\u00ecw\2\u020b\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d")
        buf.write("\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u020f\3\2\2\2")
        buf.write("\u020f\u0210\7d\2\2\u0210\u022e\3\2\2\2\u0211\u022e\5")
        buf.write("\u00e8u\2\u0212\u022b\5\26\f\2\u0213\u0214\7\5\2\2\u0214")
        buf.write("\u021d\5x=\2\u0215\u0217\7d\2\2\u0216\u0218\5\u00ecw\2")
        buf.write("\u0217\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u0217\3")
        buf.write("\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021c")
        buf.write("\7d\2\2\u021c\u021e\3\2\2\2\u021d\u0215\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e\u022c\3\2\2\2\u021f\u0220\7\\\2\2")
        buf.write("\u0220\u0229\5x=\2\u0221\u0223\7c\2\2\u0222\u0224\5\60")
        buf.write("\31\2\u0223\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0223")
        buf.write("\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227\3\2\2\2\u0227")
        buf.write("\u0228\7c\2\2\u0228\u022a\3\2\2\2\u0229\u0221\3\2\2\2")
        buf.write("\u0229\u022a\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u0213\3")
        buf.write("\2\2\2\u022b\u021f\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u0200")
        buf.write("\3\2\2\2\u022d\u0209\3\2\2\2\u022d\u0211\3\2\2\2\u022d")
        buf.write("\u0212\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0230\5\24\13")
        buf.write("\2\u0230\u0231\7`\2\2\u0231C\3\2\2\2\u0232\u0233\t\5\2")
        buf.write("\2\u0233E\3\2\2\2\u0234\u023c\5D#\2\u0235\u023c\5.\30")
        buf.write("\2\u0236\u023c\5,\27\2\u0237\u023c\5B\"\2\u0238\u023c")
        buf.write("\5J&\2\u0239\u023c\5<\37\2\u023a\u023c\5> \2\u023b\u0234")
        buf.write("\3\2\2\2\u023b\u0235\3\2\2\2\u023b\u0236\3\2\2\2\u023b")
        buf.write("\u0237\3\2\2\2\u023b\u0238\3\2\2\2\u023b\u0239\3\2\2\2")
        buf.write("\u023b\u023a\3\2\2\2\u023cG\3\2\2\2\u023d\u023e\7_\2\2")
        buf.write("\u023e\u0245\5\22\n\2\u023f\u0241\5\60\31\2\u0240\u0242")
        buf.write("\5\6\4\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write("\u0244\3\2\2\2\u0243\u023f\3\2\2\2\u0244\u0247\3\2\2\2")
        buf.write("\u0245\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0248\3")
        buf.write("\2\2\2\u0247\u0245\3\2\2\2\u0248\u0249\5\24\13\2\u0249")
        buf.write("\u024a\7`\2\2\u024aI\3\2\2\2\u024b\u024c\7a\2\2\u024c")
        buf.write("\u0253\5\22\n\2\u024d\u024f\5\60\31\2\u024e\u0250\5\6")
        buf.write("\4\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0252")
        buf.write("\3\2\2\2\u0251\u024d\3\2\2\2\u0252\u0255\3\2\2\2\u0253")
        buf.write("\u0251\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0256\3\2\2\2")
        buf.write("\u0255\u0253\3\2\2\2\u0256\u0257\5\24\13\2\u0257\u0258")
        buf.write("\7b\2\2\u0258K\3\2\2\2\u0259\u0260\7_\2\2\u025a\u025c")
        buf.write("\5\60\31\2\u025b\u025d\5\6\4\2\u025c\u025b\3\2\2\2\u025c")
        buf.write("\u025d\3\2\2\2\u025d\u025f\3\2\2\2\u025e\u025a\3\2\2\2")
        buf.write("\u025f\u0262\3\2\2\2\u0260\u025e\3\2\2\2\u0260\u0261\3")
        buf.write("\2\2\2\u0261\u0263\3\2\2\2\u0262\u0260\3\2\2\2\u0263\u0265")
        buf.write("\7`\2\2\u0264\u0266\5n8\2\u0265\u0264\3\2\2\2\u0265\u0266")
        buf.write("\3\2\2\2\u0266\u0279\3\2\2\2\u0267\u0279\5n8\2\u0268\u0269")
        buf.write("\7[\2\2\u0269\u026a\5\22\n\2\u026a\u026c\5.\30\2\u026b")
        buf.write("\u026d\5D#\2\u026c\u026b\3\2\2\2\u026c\u026d\3\2\2\2\u026d")
        buf.write("\u0279\3\2\2\2\u026e\u0275\7T\2\2\u026f\u0276\7\4\2\2")
        buf.write("\u0270\u0276\7\u0099\2\2\u0271\u0276\5,\27\2\u0272\u0276")
        buf.write("\7\24\2\2\u0273\u0276\7\13\2\2\u0274\u0276\7/\2\2\u0275")
        buf.write("\u026f\3\2\2\2\u0275\u0270\3\2\2\2\u0275\u0271\3\2\2\2")
        buf.write("\u0275\u0272\3\2\2\2\u0275\u0273\3\2\2\2\u0275\u0274\3")
        buf.write("\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\5x=\2\u0278\u0259")
        buf.write("\3\2\2\2\u0278\u0267\3\2\2\2\u0278\u0268\3\2\2\2\u0278")
        buf.write("\u026e\3\2\2\2\u0279M\3\2\2\2\u027a\u027b\5x=\2\u027b")
        buf.write("\u027c\5\f\7\2\u027c\u027d\5x=\2\u027d\u0286\5\22\n\2")
        buf.write("\u027e\u027f\7:\2\2\u027f\u0280\5x=\2\u0280\u0281\5\f")
        buf.write("\7\2\u0281\u0282\5x=\2\u0282\u0283\5\22\n\2\u0283\u0285")
        buf.write("\3\2\2\2\u0284\u027e\3\2\2\2\u0285\u0288\3\2\2\2\u0286")
        buf.write("\u0284\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0289\3\2\2\2")
        buf.write("\u0288\u0286\3\2\2\2\u0289\u028a\7;\2\2\u028a\u028b\5")
        buf.write("\f\7\2\u028b\u028c\5x=\2\u028cO\3\2\2\2\u028d\u028e\7")
        buf.write("D\2\2\u028e\u028f\5N(\2\u028fQ\3\2\2\2\u0290\u0291\7\61")
        buf.write("\2\2\u0291\u0292\5N(\2\u0292S\3\2\2\2\u0293\u0294\7\7")
        buf.write("\2\2\u0294\u029b\5\22\n\2\u0295\u0297\5\60\31\2\u0296")
        buf.write("\u0298\5\6\4\2\u0297\u0296\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u029a\3\2\2\2\u0299\u0295\3\2\2\2\u029a\u029d\3")
        buf.write("\2\2\2\u029b\u0299\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029e")
        buf.write("\3\2\2\2\u029d\u029b\3\2\2\2\u029e\u029f\5\24\13\2\u029f")
        buf.write("\u02a0\t\6\2\2\u02a0U\3\2\2\2\u02a1\u02a3\5.\30\2\u02a2")
        buf.write("\u02a4\5\u00f0y\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2")
        buf.write("\2\2\u02a4W\3\2\2\2\u02a5\u02a6\5.\30\2\u02a6\u02a7\7")
        buf.write("[\2\2\u02a7\u02a8\5\22\n\2\u02a8\u02aa\5.\30\2\u02a9\u02ab")
        buf.write("\5\u00f0y\2\u02aa\u02a9\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab")
        buf.write("Y\3\2\2\2\u02ac\u02ae\5V,\2\u02ad\u02af\5T+\2\u02ae\u02ad")
        buf.write("\3\2\2\2\u02ae\u02af\3\2\2\2\u02af[\3\2\2\2\u02b0\u02b2")
        buf.write("\5X-\2\u02b1\u02b3\5T+\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3")
        buf.write("\3\2\2\2\u02b3]\3\2\2\2\u02b4\u02ba\5Z.\2\u02b5\u02b6")
        buf.write("\5\6\4\2\u02b6\u02b7\5Z.\2\u02b7\u02b9\3\2\2\2\u02b8\u02b5")
        buf.write("\3\2\2\2\u02b9\u02bc\3\2\2\2\u02ba\u02b8\3\2\2\2\u02ba")
        buf.write("\u02bb\3\2\2\2\u02bb\u02be\3\2\2\2\u02bc\u02ba\3\2\2\2")
        buf.write("\u02bd\u02bf\5\6\4\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3")
        buf.write("\2\2\2\u02bf\u02c4\3\2\2\2\u02c0\u02c1\7\\\2\2\u02c1\u02c2")
        buf.write("\5\22\n\2\u02c2\u02c3\5~@\2\u02c3\u02c5\3\2\2\2\u02c4")
        buf.write("\u02c0\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02ca\3\2\2\2")
        buf.write("\u02c6\u02c7\7\5\2\2\u02c7\u02c8\5\22\n\2\u02c8\u02c9")
        buf.write("\5x=\2\u02c9\u02cb\3\2\2\2\u02ca\u02c6\3\2\2\2\u02ca\u02cb")
        buf.write("\3\2\2\2\u02cb_\3\2\2\2\u02cc\u02d2\7\u0099\2\2\u02cd")
        buf.write("\u02ce\5\6\4\2\u02ce\u02cf\7\u0099\2\2\u02cf\u02d1\3\2")
        buf.write("\2\2\u02d0\u02cd\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d6\3\2\2\2\u02d4")
        buf.write("\u02d2\3\2\2\2\u02d5\u02d7\5\6\4\2\u02d6\u02d5\3\2\2\2")
        buf.write("\u02d6\u02d7\3\2\2\2\u02d7\u02dc\3\2\2\2\u02d8\u02d9\7")
        buf.write("\\\2\2\u02d9\u02da\5\22\n\2\u02da\u02db\5~@\2\u02db\u02dd")
        buf.write("\3\2\2\2\u02dc\u02d8\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd")
        buf.write("\u02e2\3\2\2\2\u02de\u02df\7\5\2\2\u02df\u02e0\5\22\n")
        buf.write("\2\u02e0\u02e1\5x=\2\u02e1\u02e3\3\2\2\2\u02e2\u02de\3")
        buf.write("\2\2\2\u02e2\u02e3\3\2\2\2\u02e3a\3\2\2\2\u02e4\u02e5")
        buf.write("\7.\2\2\u02e5\u02e6\7a\2\2\u02e6\u02ee\5\22\n\2\u02e7")
        buf.write("\u02ea\5`\61\2\u02e8\u02eb\5\6\4\2\u02e9\u02eb\5\b\5\2")
        buf.write("\u02ea\u02e8\3\2\2\2\u02ea\u02e9\3\2\2\2\u02ea\u02eb\3")
        buf.write("\2\2\2\u02eb\u02ed\3\2\2\2\u02ec\u02e7\3\2\2\2\u02ed\u02f0")
        buf.write("\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef")
        buf.write("\u02f1\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f1\u02f2\5\24\13")
        buf.write("\2\u02f2\u02f3\7b\2\2\u02f3c\3\2\2\2\u02f4\u02f6\7.\2")
        buf.write("\2\u02f5\u02f7\7e\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7")
        buf.write("\3\2\2\2\u02f7\u0303\3\2\2\2\u02f8\u02f9\7\u0096\2\2\u02f9")
        buf.write("\u02fa\b\63\1\2\u02fa\u0300\5`\61\2\u02fb\u02fc\7\u0096")
        buf.write("\2\2\u02fc\u02fd\b\63\1\2\u02fd\u02ff\5`\61\2\u02fe\u02fb")
        buf.write("\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300\3\2\2\2")
        buf.write("\u0303\u02f8\3\2\2\2\u0303\u0304\3\2\2\2\u0304e\3\2\2")
        buf.write("\2\u0305\u0306\7.\2\2\u0306g\3\2\2\2\u0307\u030b\7_\2")
        buf.write("\2\u0308\u030a\5^\60\2\u0309\u0308\3\2\2\2\u030a\u030d")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c")
        buf.write("\u0310\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u0311\5\6\4\2")
        buf.write("\u030f\u0311\5\b\5\2\u0310\u030e\3\2\2\2\u0310\u030f\3")
        buf.write("\2\2\2\u0311\u0312\3\2\2\2\u0312\u0313\7`\2\2\u0313i\3")
        buf.write("\2\2\2\u0314\u0316\5h\65\2\u0315\u0314\3\2\2\2\u0315\u0316")
        buf.write("\3\2\2\2\u0316\u031b\3\2\2\2\u0317\u0318\7\t\2\2\u0318")
        buf.write("\u0319\5\22\n\2\u0319\u031a\5~@\2\u031a\u031c\3\2\2\2")
        buf.write("\u031b\u0317\3\2\2\2\u031b\u031c\3\2\2\2\u031ck\3\2\2")
        buf.write("\2\u031d\u031f\5h\65\2\u031e\u031d\3\2\2\2\u031e\u031f")
        buf.write("\3\2\2\2\u031f\u0324\3\2\2\2\u0320\u0321\7\\\2\2\u0321")
        buf.write("\u0322\5\22\n\2\u0322\u0323\5~@\2\u0323\u0325\3\2\2\2")
        buf.write("\u0324\u0320\3\2\2\2\u0324\u0325\3\2\2\2\u0325m\3\2\2")
        buf.write("\2\u0326\u0327\79\2\2\u0327\u0329\5j\66\2\u0328\u032a")
        buf.write("\5\u00e8u\2\u0329\u0328\3\2\2\2\u0329\u032a\3\2\2\2\u032a")
        buf.write("\u032b\3\2\2\2\u032b\u032c\5\f\7\2\u032c\u032d\5\u00ee")
        buf.write("x\2\u032do\3\2\2\2\u032e\u032f\7$\2\2\u032f\u0331\5l\67")
        buf.write("\2\u0330\u0332\5\u00e8u\2\u0331\u0330\3\2\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332\u0338\3\2\2\2\u0333\u0335\7\5\2\2\u0334")
        buf.write("\u0336\7e\2\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2\2")
        buf.write("\u0336\u0337\3\2\2\2\u0337\u0339\5\u00eex\2\u0338\u0333")
        buf.write("\3\2\2\2\u0338\u0339\3\2\2\2\u0339q\3\2\2\2\u033a\u033b")
        buf.write("\7\67\2\2\u033b\u033c\5\22\n\2\u033c\u033d\5~@\2\u033d")
        buf.write("s\3\2\2\2\u033e\u0340\7A\2\2\u033f\u0341\5Z.\2\u0340\u033f")
        buf.write("\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0340\3\2\2\2\u0342")
        buf.write("\u0343\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345\5\6\4\2")
        buf.write("\u0345\u0346\3\2\2\2\u0346\u0347\7F\2\2\u0347\u0348\5")
        buf.write("x=\2\u0348\u0349\5\f\7\2\u0349\u034a\5\u00eex\2\u034a")
        buf.write("u\3\2\2\2\u034b\u034c\5t;\2\u034cw\3\2\2\2\u034d\u0354")
        buf.write("\5\u00aeX\2\u034e\u0354\5P)\2\u034f\u0354\5R*\2\u0350")
        buf.write("\u0354\7\23\2\2\u0351\u0354\5v<\2\u0352\u0354\5\u00a8")
        buf.write("U\2\u0353\u034d\3\2\2\2\u0353\u034e\3\2\2\2\u0353\u034f")
        buf.write("\3\2\2\2\u0353\u0350\3\2\2\2\u0353\u0351\3\2\2\2\u0353")
        buf.write("\u0352\3\2\2\2\u0354\u0357\3\2\2\2\u0355\u0357\5\26\f")
        buf.write("\2\u0356\u0353\3\2\2\2\u0356\u0355\3\2\2\2\u0357y\3\2")
        buf.write("\2\2\u0358\u0359\t\7\2\2\u0359{\3\2\2\2\u035a\u035c\5")
        buf.write("\20\t\2\u035b\u035a\3\2\2\2\u035c\u035f\3\2\2\2\u035d")
        buf.write("\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0360\3\2\2\2")
        buf.write("\u035f\u035d\3\2\2\2\u0360\u0364\5F$\2\u0361\u0363\5L")
        buf.write("\'\2\u0362\u0361\3\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362")
        buf.write("\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u036a\3\2\2\2\u0366")
        buf.write("\u0364\3\2\2\2\u0367\u0368\7\20\2\2\u0368\u036a\5|?\2")
        buf.write("\u0369\u035d\3\2\2\2\u0369\u0367\3\2\2\2\u036a}\3\2\2")
        buf.write("\2\u036b\u036c\5\26\f\2\u036c\177\3\2\2\2\u036d\u0371")
        buf.write("\5\26\f\2\u036e\u036f\7\25\2\2\u036f\u0371\5\u00dan\2")
        buf.write("\u0370\u036d\3\2\2\2\u0370\u036e\3\2\2\2\u0371\u0081\3")
        buf.write("\2\2\2\u0372\u0374\7\\\2\2\u0373\u0375\5\u00eex\2\u0374")
        buf.write("\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0395\3\2\2\2")
        buf.write("\u0376\u0377\7\u0096\2\2\u0377\u0378\bB\1\2\u0378\u0394")
        buf.write("\5n8\2\u0379\u037a\7\u0096\2\2\u037a\u037b\bB\1\2\u037b")
        buf.write("\u037c\7!\2\2\u037c\u037d\5\62\32\2\u037d\u037e\7\\\2")
        buf.write("\2\u037e\u037f\5\u00eex\2\u037f\u0394\3\2\2\2\u0380\u0381")
        buf.write("\7\u0096\2\2\u0381\u0382\bB\1\2\u0382\u0383\7:\2\2\u0383")
        buf.write("\u0384\5x=\2\u0384\u0385\7\\\2\2\u0385\u0386\5\u00eex")
        buf.write("\2\u0386\u0394\3\2\2\2\u0387\u0388\7\u0096\2\2\u0388\u0389")
        buf.write("\bB\1\2\u0389\u038a\7>\2\2\u038a\u038b\5\62\32\2\u038b")
        buf.write("\u038c\7\\\2\2\u038c\u038d\5\u00eex\2\u038d\u0394\3\2")
        buf.write("\2\2\u038e\u038f\7\u0096\2\2\u038f\u0390\bB\1\2\u0390")
        buf.write("\u0391\7;\2\2\u0391\u0392\7\\\2\2\u0392\u0394\5\u00ee")
        buf.write("x\2\u0393\u0376\3\2\2\2\u0393\u0379\3\2\2\2\u0393\u0380")
        buf.write("\3\2\2\2\u0393\u0387\3\2\2\2\u0393\u038e\3\2\2\2\u0394")
        buf.write("\u0397\3\2\2\2\u0395\u0393\3\2\2\2\u0395\u0396\3\2\2\2")
        buf.write("\u0396\u0083\3\2\2\2\u0397\u0395\3\2\2\2\u0398\u03a7\5")
        buf.write("\26\f\2\u0399\u039a\7\5\2\2\u039a\u039b\5\22\n\2\u039b")
        buf.write("\u039d\5x=\2\u039c\u039e\5\u00e0q\2\u039d\u039c\3\2\2")
        buf.write("\2\u039d\u039e\3\2\2\2\u039e\u03a8\3\2\2\2\u039f\u03a1")
        buf.write("\5x=\2\u03a0\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4")
        buf.write("\u03a5\5\6\4\2\u03a5\u03a6\5n8\2\u03a6\u03a8\3\2\2\2\u03a7")
        buf.write("\u0399\3\2\2\2\u03a7\u03a0\3\2\2\2\u03a7\u03a8\3\2\2\2")
        buf.write("\u03a8\u0085\3\2\2\2\u03a9\u03aa\7E\2\2\u03aa\u03ab\5")
        buf.write("\22\n\2\u03ab\u03bd\5x=\2\u03ac\u03ad\5\6\4\2\u03ad\u03ae")
        buf.write("\5x=\2\u03ae\u03b0\3\2\2\2\u03af\u03ac\3\2\2\2\u03b0\u03b3")
        buf.write("\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2")
        buf.write("\u03be\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b4\u03b5\7>\2\2")
        buf.write("\u03b5\u03b7\5\22\n\2\u03b6\u03b8\5x=\2\u03b7\u03b6\3")
        buf.write("\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba")
        buf.write("\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bc\5\6\4\2\u03bc")
        buf.write("\u03be\3\2\2\2\u03bd\u03b1\3\2\2\2\u03bd\u03b4\3\2\2\2")
        buf.write("\u03be\u0087\3\2\2\2\u03bf\u03c0\7G\2\2\u03c0\u03c2\5")
        buf.write("\22\n\2\u03c1\u03c3\5x=\2\u03c2\u03c1\3\2\2\2\u03c3\u03c4")
        buf.write("\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03c6\3\2\2\2\u03c6\u03c7\5\6\4\2\u03c7\u0089\3\2\2\2")
        buf.write("\u03c8\u03c9\7B\2\2\u03c9\u03ca\7\u0088\2\2\u03ca\u03cb")
        buf.write("\7E\2\2\u03cb\u03cc\5\22\n\2\u03cc\u03d2\5x=\2\u03cd\u03ce")
        buf.write("\5\6\4\2\u03ce\u03cf\5x=\2\u03cf\u03d1\3\2\2\2\u03d0\u03cd")
        buf.write("\3\2\2\2\u03d1\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2")
        buf.write("\u03d3\3\2\2\2\u03d3\u008b\3\2\2\2\u03d4\u03d2\3\2\2\2")
        buf.write("\u03d5\u03d6\7(\2\2\u03d6\u03d8\5\22\n\2\u03d7\u03d9\5")
        buf.write("x=\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u008d")
        buf.write("\3\2\2\2\u03da\u03db\7&\2\2\u03db\u03dd\5\22\n\2\u03dc")
        buf.write("\u03de\5x=\2\u03dd\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de")
        buf.write("\u008f\3\2\2\2\u03df\u03e0\7\64\2\2\u03e0\u03e2\5\22\n")
        buf.write("\2\u03e1\u03e3\5x=\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3")
        buf.write("\2\2\2\u03e3\u0091\3\2\2\2\u03e4\u03e5\7\66\2\2\u03e5")
        buf.write("\u03e7\5\22\n\2\u03e6\u03e8\5x=\2\u03e7\u03e6\3\2\2\2")
        buf.write("\u03e7\u03e8\3\2\2\2\u03e8\u0093\3\2\2\2\u03e9\u03ea\7")
        buf.write("\22\2\2\u03ea\u03ec\5\22\n\2\u03eb\u03ed\5x=\2\u03ec\u03eb")
        buf.write("\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u0095\3\2\2\2\u03ee")
        buf.write("\u03ef\7\22\2\2\u03ef\u03f1\5\22\n\2\u03f0\u03f2\5x=\2")
        buf.write("\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u0097\3")
        buf.write("\2\2\2\u03f3\u03f4\5x=\2\u03f4\u03f5\5\f\7\2\u03f5\u03f7")
        buf.write("\5\u00eex\2\u03f6\u03f8\7e\2\2\u03f7\u03f6\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8\u0402\3\2\2\2\u03f9\u03fa\7\u0096")
        buf.write("\2\2\u03fa\u03fb\bM\1\2\u03fb\u03fc\7:\2\2\u03fc\u03fd")
        buf.write("\5x=\2\u03fd\u03fe\5\f\7\2\u03fe\u03ff\5\u00eex\2\u03ff")
        buf.write("\u0401\3\2\2\2\u0400\u03f9\3\2\2\2\u0401\u0404\3\2\2\2")
        buf.write("\u0402\u0400\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u040b\3")
        buf.write("\2\2\2\u0404\u0402\3\2\2\2\u0405\u0406\7\u0096\2\2\u0406")
        buf.write("\u0407\bM\1\2\u0407\u0408\7;\2\2\u0408\u0409\5\f\7\2\u0409")
        buf.write("\u040a\5\u00eex\2\u040a\u040c\3\2\2\2\u040b\u0405\3\2")
        buf.write("\2\2\u040b\u040c\3\2\2\2\u040c\u0099\3\2\2\2\u040d\u040e")
        buf.write("\7D\2\2\u040e\u040f\5\u0098M\2\u040f\u009b\3\2\2\2\u0410")
        buf.write("\u0411\7\61\2\2\u0411\u0412\5\u0098M\2\u0412\u009d\3\2")
        buf.write("\2\2\u0413\u0414\7\62\2\2\u0414\u0415\5x=\2\u0415\u0416")
        buf.write("\5\f\7\2\u0416\u0417\5\u00eex\2\u0417\u009f\3\2\2\2\u0418")
        buf.write("\u0419\7!\2\2\u0419\u041a\5\62\32\2\u041a\u041b\5\f\7")
        buf.write("\2\u041b\u041c\5\u00eex\2\u041c\u00a1\3\2\2\2\u041d\u0423")
        buf.write("\5\u00a0Q\2\u041e\u041f\7\u0096\2\2\u041f\u0420\bR\1\2")
        buf.write("\u0420\u0422\5\u00a0Q\2\u0421\u041e\3\2\2\2\u0422\u0425")
        buf.write("\3\2\2\2\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424")
        buf.write("\u042f\3\2\2\2\u0425\u0423\3\2\2\2\u0426\u0427\7\u0096")
        buf.write("\2\2\u0427\u0428\bR\1\2\u0428\u0429\7:\2\2\u0429\u042a")
        buf.write("\5x=\2\u042a\u042b\5\f\7\2\u042b\u042c\5\u00eex\2\u042c")
        buf.write("\u042e\3\2\2\2\u042d\u0426\3\2\2\2\u042e\u0431\3\2\2\2")
        buf.write("\u042f\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0438\3")
        buf.write("\2\2\2\u0431\u042f\3\2\2\2\u0432\u0433\7\u0096\2\2\u0433")
        buf.write("\u0434\bR\1\2\u0434\u0435\7;\2\2\u0435\u0436\5\f\7\2\u0436")
        buf.write("\u0437\5\u00eex\2\u0437\u0439\3\2\2\2\u0438\u0432\3\2")
        buf.write("\2\2\u0438\u0439\3\2\2\2\u0439\u00a3\3\2\2\2\u043a\u043b")
        buf.write("\7\23\2\2\u043b\u043d\5x=\2\u043c\u043e\7\\\2\2\u043d")
        buf.write("\u043c\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440\3\2\2\2")
        buf.write("\u043f\u0441\7e\2\2\u0440\u043f\3\2\2\2\u0440\u0441\3")
        buf.write("\2\2\2\u0441\u044a\3\2\2\2\u0442\u0443\7\u0096\2\2\u0443")
        buf.write("\u0444\bS\1\2\u0444\u0445\5\u00a2R\2\u0445\u0446\7\u0097")
        buf.write("\2\2\u0446\u044b\3\2\2\2\u0447\u0448\7\u0096\2\2\u0448")
        buf.write("\u0449\bS\1\2\u0449\u044b\5\u00a2R\2\u044a\u0442\3\2\2")
        buf.write("\2\u044a\u0447\3\2\2\2\u044b\u00a5\3\2\2\2\u044c\u044d")
        buf.write("\7-\2\2\u044d\u044e\5\f\7\2\u044e\u044f\5\u00eex\2\u044f")
        buf.write("\u0454\7T\2\2\u0450\u0451\7\u0096\2\2\u0451\u0452\6T\2")
        buf.write("\2\u0452\u0455\7>\2\2\u0453\u0455\7@\2\2\u0454\u0450\3")
        buf.write("\2\2\2\u0454\u0453\3\2\2\2\u0455\u045f\3\2\2\2\u0456\u0457")
        buf.write("\7\u0096\2\2\u0457\u0458\6T\3\2\u0458\u0459\7>\2\2\u0459")
        buf.write("\u045a\5\62\32\2\u045a\u045b\5\f\7\2\u045b\u045c\5\u00ee")
        buf.write("x\2\u045c\u045e\3\2\2\2\u045d\u0456\3\2\2\2\u045e\u0461")
        buf.write("\3\2\2\2\u045f\u045d\3\2\2\2\u045f\u0460\3\2\2\2\u0460")
        buf.write("\u0468\3\2\2\2\u0461\u045f\3\2\2\2\u0462\u0463\7\u0096")
        buf.write("\2\2\u0463\u0464\6T\4\2\u0464\u0465\7@\2\2\u0465\u0466")
        buf.write("\5\f\7\2\u0466\u0467\5\u00eex\2\u0467\u0469\3\2\2\2\u0468")
        buf.write("\u0462\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u00a7\3\2\2\2")
        buf.write("\u046a\u046b\7-\2\2\u046b\u046c\5\f\7\2\u046c\u046d\5")
        buf.write("\u00eex\2\u046d\u0472\7T\2\2\u046e\u046f\5\22\n\2\u046f")
        buf.write("\u0470\7>\2\2\u0470\u0473\3\2\2\2\u0471\u0473\7@\2\2\u0472")
        buf.write("\u046e\3\2\2\2\u0472\u0471\3\2\2\2\u0473\u047c\3\2\2\2")
        buf.write("\u0474\u0475\5\22\n\2\u0475\u0476\7>\2\2\u0476\u0477\5")
        buf.write("\62\32\2\u0477\u0478\5\f\7\2\u0478\u0479\5\u00eex\2\u0479")
        buf.write("\u047b\3\2\2\2\u047a\u0474\3\2\2\2\u047b\u047e\3\2\2\2")
        buf.write("\u047c\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0484\3")
        buf.write("\2\2\2\u047e\u047c\3\2\2\2\u047f\u0480\5\22\n\2\u0480")
        buf.write("\u0481\7@\2\2\u0481\u0482\5\f\7\2\u0482\u0483\5\u00ee")
        buf.write("x\2\u0483\u0485\3\2\2\2\u0484\u047f\3\2\2\2\u0484\u0485")
        buf.write("\3\2\2\2\u0485\u00a9\3\2\2\2\u0486\u0487\7>\2\2\u0487")
        buf.write("\u0488\5\f\7\2\u0488\u0489\5\u00eex\2\u0489\u00ab\3\2")
        buf.write("\2\2\u048a\u048c\7\21\2\2\u048b\u048d\5.\30\2\u048c\u048b")
        buf.write("\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3\2\2\2\u048e")
        buf.write("\u048f\5\f\7\2\u048f\u0490\5\u00eex\2\u0490\u00ad\3\2")
        buf.write("\2\2\u0491\u0493\7\21\2\2\u0492\u0494\5.\30\2\u0493\u0492")
        buf.write("\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0495\3\2\2\2\u0495")
        buf.write("\u0496\5\f\7\2\u0496\u0497\5\u00eex\2\u0497\u00af\3\2")
        buf.write("\2\2\u0498\u0499\7+\2\2\u0499\u049a\5\f\7\2\u049a\u049b")
        buf.write("\5\u00eex\2\u049b\u00b1\3\2\2\2\u049c\u049d\7\65\2\2\u049d")
        buf.write("\u049e\5\f\7\2\u049e\u049f\5\u00eex\2\u049f\u00b3\3\2")
        buf.write("\2\2\u04a0\u04a2\7\17\2\2\u04a1\u04a3\5T+\2\u04a2\u04a1")
        buf.write("\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4")
        buf.write("\u04a5\t\b\2\2\u04a5\u00b5\3\2\2\2\u04a6\u04ac\5.\30\2")
        buf.write("\u04a7\u04a8\5\6\4\2\u04a8\u04a9\5.\30\2\u04a9\u04ab\3")
        buf.write("\2\2\2\u04aa\u04a7\3\2\2\2\u04ab\u04ae\3\2\2\2\u04ac\u04aa")
        buf.write("\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04b2\3\2\2\2\u04ae")
        buf.write("\u04ac\3\2\2\2\u04af\u04b0\5\n\6\2\u04b0\u04b1\5x=\2\u04b1")
        buf.write("\u04b3\3\2\2\2\u04b2\u04af\3\2\2\2\u04b2\u04b3\3\2\2\2")
        buf.write("\u04b3\u04b8\3\2\2\2\u04b4\u04b5\7\5\2\2\u04b5\u04b6\5")
        buf.write("\22\n\2\u04b6\u04b7\5x=\2\u04b7\u04b9\3\2\2\2\u04b8\u04b4")
        buf.write("\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u00b7\3\2\2\2\u04ba")
        buf.write("\u04bb\7a\2\2\u04bb\u04bf\5\22\n\2\u04bc\u04be\5\u00b6")
        buf.write("\\\2\u04bd\u04bc\3\2\2\2\u04be\u04c1\3\2\2\2\u04bf\u04bd")
        buf.write("\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c4\3\2\2\2\u04c1")
        buf.write("\u04bf\3\2\2\2\u04c2\u04c5\5\6\4\2\u04c3\u04c5\5\b\5\2")
        buf.write("\u04c4\u04c2\3\2\2\2\u04c4\u04c3\3\2\2\2\u04c5\u04c6\3")
        buf.write("\2\2\2\u04c6\u04c7\5\24\13\2\u04c7\u04c8\7b\2\2\u04c8")
        buf.write("\u00b9\3\2\2\2\u04c9\u04ca\7]\2\2\u04ca\u04cb\5\u00ee")
        buf.write("x\2\u04cb\u04cc\7^\2\2\u04cc\u00bb\3\2\2\2\u04cd\u04ce")
        buf.write("\7\u0096\2\2\u04ce\u04cf\b_\1\2\u04cf\u04d1\7e\2\2\u04d0")
        buf.write("\u04cd\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d6\3\2\2\2")
        buf.write("\u04d2\u04d4\7e\2\2\u04d3\u04d2\3\2\2\2\u04d3\u04d4\3")
        buf.write("\2\2\2\u04d4\u04d6\3\2\2\2\u04d5\u04d0\3\2\2\2\u04d5\u04d3")
        buf.write("\3\2\2\2\u04d6\u00bd\3\2\2\2\u04d7\u04d8\5\22\n\2\u04d8")
        buf.write("\u04da\5V,\2\u04d9\u04db\5\u00ba^\2\u04da\u04d9\3\2\2")
        buf.write("\2\u04da\u04db\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04de")
        buf.write("\5\u00b8]\2\u04dd\u04dc\3\2\2\2\u04dd\u04de\3\2\2\2\u04de")
        buf.write("\u04df\3\2\2\2\u04df\u04e1\5l\67\2\u04e0\u04e2\5T+\2\u04e1")
        buf.write("\u04e0\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e8\3\2\2\2")
        buf.write("\u04e3\u04e5\7\5\2\2\u04e4\u04e6\7e\2\2\u04e5\u04e4\3")
        buf.write("\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e9")
        buf.write("\5\u00eex\2\u04e8\u04e3\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9")
        buf.write("\u04ea\3\2\2\2\u04ea\u04eb\5\u00bc_\2\u04eb\u00bf\3\2")
        buf.write("\2\2\u04ec\u04ed\7e\2\2\u04ed\u00c1\3\2\2\2\u04ee\u04f0")
        buf.write("\7e\2\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0")
        buf.write("\u04f1\3\2\2\2\u04f1\u04fe\5\u00dco\2\u04f2\u04f3\7\u0096")
        buf.write("\2\2\u04f3\u04f6\bb\1\2\u04f4\u04f7\5\u00dco\2\u04f5\u04f7")
        buf.write("\7e\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f5\3\2\2\2\u04f7")
        buf.write("\u04f8\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2")
        buf.write("\u04f9\u04fa\3\2\2\2\u04fa\u04fb\7\u0096\2\2\u04fb\u04fc")
        buf.write("\bb\1\2\u04fc\u04fe\7\u0097\2\2\u04fd\u04ef\3\2\2\2\u04fd")
        buf.write("\u04f2\3\2\2\2\u04fe\u00c3\3\2\2\2\u04ff\u0501\7e\2\2")
        buf.write("\u0500\u04ff\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0502\3")
        buf.write("\2\2\2\u0502\u050f\5\u00c8e\2\u0503\u0504\7\u0096\2\2")
        buf.write("\u0504\u0507\bc\1\2\u0505\u0508\5\u00c8e\2\u0506\u0508")
        buf.write("\7e\2\2\u0507\u0505\3\2\2\2\u0507\u0506\3\2\2\2\u0508")
        buf.write("\u0509\3\2\2\2\u0509\u0507\3\2\2\2\u0509\u050a\3\2\2\2")
        buf.write("\u050a\u050b\3\2\2\2\u050b\u050c\7\u0096\2\2\u050c\u050d")
        buf.write("\bc\1\2\u050d\u050f\7\u0097\2\2\u050e\u0500\3\2\2\2\u050e")
        buf.write("\u0503\3\2\2\2\u050f\u00c5\3\2\2\2\u0510\u0512\7e\2\2")
        buf.write("\u0511\u0510\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513\3")
        buf.write("\2\2\2\u0513\u0520\5\u00e2r\2\u0514\u0515\7\u0096\2\2")
        buf.write("\u0515\u0518\bd\1\2\u0516\u0519\5\u00e2r\2\u0517\u0519")
        buf.write("\7e\2\2\u0518\u0516\3\2\2\2\u0518\u0517\3\2\2\2\u0519")
        buf.write("\u051a\3\2\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3\2\2\2")
        buf.write("\u051b\u051c\3\2\2\2\u051c\u051d\7\u0096\2\2\u051d\u051e")
        buf.write("\bd\1\2\u051e\u0520\7\u0097\2\2\u051f\u0511\3\2\2\2\u051f")
        buf.write("\u0514\3\2\2\2\u0520\u00c7\3\2\2\2\u0521\u0525\5Z.\2\u0522")
        buf.write("\u0523\5\n\6\2\u0523\u0524\5~@\2\u0524\u0526\3\2\2\2\u0525")
        buf.write("\u0522\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527\3\2\2\2")
        buf.write("\u0527\u0528\7\5\2\2\u0528\u0529\5\22\n\2\u0529\u052a")
        buf.write("\5x=\2\u052a\u052b\5\u00bc_\2\u052b\u00c9\3\2\2\2\u052c")
        buf.write("\u052d\7=\2\2\u052d\u053b\5\22\n\2\u052e\u052f\5.\30\2")
        buf.write("\u052f\u0536\5\22\n\2\u0530\u0531\7\5\2\2\u0531\u0532")
        buf.write("\5\22\n\2\u0532\u0534\5x=\2\u0533\u0535\7e\2\2\u0534\u0533")
        buf.write("\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0537\3\2\2\2\u0536")
        buf.write("\u0530\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0539\3\2\2\2")
        buf.write("\u0538\u053a\5\6\4\2\u0539\u0538\3\2\2\2\u0539\u053a\3")
        buf.write("\2\2\2\u053a\u053c\3\2\2\2\u053b\u052e\3\2\2\2\u053c\u053d")
        buf.write("\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e")
        buf.write("\u00cb\3\2\2\2\u053f\u0540\7\61\2\2\u0540\u0541\5x=\2")
        buf.write("\u0541\u0542\5\f\7\2\u0542\u0544\5\u00d4k\2\u0543\u0545")
        buf.write("\7e\2\2\u0544\u0543\3\2\2\2\u0544\u0545\3\2\2\2\u0545")
        buf.write("\u054f\3\2\2\2\u0546\u0547\7:\2\2\u0547\u0548\5x=\2\u0548")
        buf.write("\u0549\5\f\7\2\u0549\u054b\5\u00d4k\2\u054a\u054c\7e\2")
        buf.write("\2\u054b\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054e")
        buf.write("\3\2\2\2\u054d\u0546\3\2\2\2\u054e\u0551\3\2\2\2\u054f")
        buf.write("\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0558\3\2\2\2")
        buf.write("\u0551\u054f\3\2\2\2\u0552\u0553\7;\2\2\u0553\u0554\5")
        buf.write("\f\7\2\u0554\u0556\5\u00d4k\2\u0555\u0557\7e\2\2\u0556")
        buf.write("\u0555\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0559\3\2\2\2")
        buf.write("\u0558\u0552\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u00cd\3")
        buf.write("\2\2\2\u055a\u055b\7!\2\2\u055b\u055c\5\62\32\2\u055c")
        buf.write("\u055d\5\f\7\2\u055d\u055e\5\u00d4k\2\u055e\u00cf\3\2")
        buf.write("\2\2\u055f\u0565\5\u00ceh\2\u0560\u0561\7\u0096\2\2\u0561")
        buf.write("\u0562\bi\1\2\u0562\u0564\5\u00ceh\2\u0563\u0560\3\2\2")
        buf.write("\2\u0564\u0567\3\2\2\2\u0565\u0563\3\2\2\2\u0565\u0566")
        buf.write("\3\2\2\2\u0566\u0571\3\2\2\2\u0567\u0565\3\2\2\2\u0568")
        buf.write("\u0569\7\u0096\2\2\u0569\u056a\bi\1\2\u056a\u056b\7:\2")
        buf.write("\2\u056b\u056c\5x=\2\u056c\u056d\5\f\7\2\u056d\u056e\5")
        buf.write("\u00d4k\2\u056e\u0570\3\2\2\2\u056f\u0568\3\2\2\2\u0570")
        buf.write("\u0573\3\2\2\2\u0571\u056f\3\2\2\2\u0571\u0572\3\2\2\2")
        buf.write("\u0572\u057a\3\2\2\2\u0573\u0571\3\2\2\2\u0574\u0575\7")
        buf.write("\u0096\2\2\u0575\u0576\bi\1\2\u0576\u0577\7;\2\2\u0577")
        buf.write("\u0578\5\f\7\2\u0578\u0579\5\u00d4k\2\u0579\u057b\3\2")
        buf.write("\2\2\u057a\u0574\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u00d1")
        buf.write("\3\2\2\2\u057c\u057d\7\23\2\2\u057d\u057e\5Z.\2\u057e")
        buf.write("\u057f\7\\\2\2\u057f\u0581\5~@\2\u0580\u0582\7\\\2\2\u0581")
        buf.write("\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2")
        buf.write("\u0583\u0585\7e\2\2\u0584\u0583\3\2\2\2\u0584\u0585\3")
        buf.write("\2\2\2\u0585\u058e\3\2\2\2\u0586\u0587\7\u0096\2\2\u0587")
        buf.write("\u0588\bj\1\2\u0588\u0589\5\u00d0i\2\u0589\u058a\7\u0097")
        buf.write("\2\2\u058a\u058f\3\2\2\2\u058b\u058c\7\u0096\2\2\u058c")
        buf.write("\u058d\bj\1\2\u058d\u058f\5\u00d0i\2\u058e\u0586\3\2\2")
        buf.write("\2\u058e\u058b\3\2\2\2\u058f\u00d3\3\2\2\2\u0590\u0591")
        buf.write("\7\u0096\2\2\u0591\u0593\bk\1\2\u0592\u0594\5\u00d4k\2")
        buf.write("\u0593\u0592\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0593\3")
        buf.write("\2\2\2\u0595\u0596\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0598")
        buf.write("\7\u0096\2\2\u0598\u0599\bk\1\2\u0599\u059a\7\u0097\2")
        buf.write("\2\u059a\u05a1\3\2\2\2\u059b\u05a1\5\u00ccg\2\u059c\u05a1")
        buf.write("\5\u00d2j\2\u059d\u05a1\7\35\2\2\u059e\u05a1\7\66\2\2")
        buf.write("\u059f\u05a1\5^\60\2\u05a0\u0590\3\2\2\2\u05a0\u059b\3")
        buf.write("\2\2\2\u05a0\u059c\3\2\2\2\u05a0\u059d\3\2\2\2\u05a0\u059e")
        buf.write("\3\2\2\2\u05a0\u059f\3\2\2\2\u05a1\u00d5\3\2\2\2\u05a2")
        buf.write("\u05a4\7 \2\2\u05a3\u05a5\5T+\2\u05a4\u05a3\3\2\2\2\u05a4")
        buf.write("\u05a5\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a7\7!\2\2")
        buf.write("\u05a7\u05a9\5~@\2\u05a8\u05a6\3\2\2\2\u05a8\u05a9\3\2")
        buf.write("\2\2\u05a9\u05ab\3\2\2\2\u05aa\u05ac\7e\2\2\u05ab\u05aa")
        buf.write("\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad")
        buf.write("\u05ae\5\u00d4k\2\u05ae\u00d7\3\2\2\2\u05af\u05b1\t\t")
        buf.write("\2\2\u05b0\u05af\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2")
        buf.write("\3\2\2\2\u05b2\u05b3\5.\30\2\u05b3\u00d9\3\2\2\2\u05b4")
        buf.write("\u05b6\5\u00d8m\2\u05b5\u05b4\3\2\2\2\u05b6\u05b9\3\2")
        buf.write("\2\2\u05b7\u05b5\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05ba")
        buf.write("\3\2\2\2\u05b9\u05b7\3\2\2\2\u05ba\u05bc\7c\2\2\u05bb")
        buf.write("\u05bd\5T+\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd")
        buf.write("\u05c6\3\2\2\2\u05be\u05c2\7!\2\2\u05bf\u05c1\5~@\2\u05c0")
        buf.write("\u05bf\3\2\2\2\u05c1\u05c4\3\2\2\2\u05c2\u05c0\3\2\2\2")
        buf.write("\u05c2\u05c3\3\2\2\2\u05c3\u05c5\3\2\2\2\u05c4\u05c2\3")
        buf.write("\2\2\2\u05c5\u05c7\7c\2\2\u05c6\u05be\3\2\2\2\u05c6\u05c7")
        buf.write("\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c9\7\u0096\2\2\u05c9")
        buf.write("\u05ca\bn\1\2\u05ca\u05cb\5\u00eex\2\u05cb\u00db\3\2\2")
        buf.write("\2\u05cc\u05ce\5\\/\2\u05cd\u05cf\5\u00b8]\2\u05ce\u05cd")
        buf.write("\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0")
        buf.write("\u05d1\7\5\2\2\u05d1\u05d2\5\22\n\2\u05d2\u05d4\5\u0080")
        buf.write("A\2\u05d3\u05d5\5\u00bc_\2\u05d4\u05d3\3\2\2\2\u05d4\u05d5")
        buf.write("\3\2\2\2\u05d5\u00dd\3\2\2\2\u05d6\u05d7\7_\2\2\u05d7")
        buf.write("\u05d9\5\22\n\2\u05d8\u05da\5Z.\2\u05d9\u05d8\3\2\2\2")
        buf.write("\u05da\u05db\3\2\2\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3")
        buf.write("\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05de\5\6\4\2\u05de\u05df")
        buf.write("\5\24\13\2\u05df\u05e0\7`\2\2\u05e0\u05e1\7\5\2\2\u05e1")
        buf.write("\u05e2\5\22\n\2\u05e2\u05e3\5x=\2\u05e3\u00df\3\2\2\2")
        buf.write("\u05e4\u05e5\5\f\7\2\u05e5\u05e7\5\u00eex\2\u05e6\u05e8")
        buf.write("\5n8\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u00e1")
        buf.write("\3\2\2\2\u05e9\u05ec\5\u00dep\2\u05ea\u05ec\5`\61\2\u05eb")
        buf.write("\u05e9\3\2\2\2\u05eb\u05ea\3\2\2\2\u05ec\u05ee\3\2\2\2")
        buf.write("\u05ed\u05ef\5\u00e0q\2\u05ee\u05ed\3\2\2\2\u05ee\u05ef")
        buf.write("\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f1\5\u00bc_\2\u05f1")
        buf.write("\u00e3\3\2\2\2\u05f2\u05f3\7\20\2\2\u05f3\u05f5\5\22\n")
        buf.write("\2\u05f4\u05f6\5:\36\2\u05f5\u05f4\3\2\2\2\u05f6\u05f7")
        buf.write("\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u05fa\5\6\4\2\u05fa\u00e5\3\2\2\2")
        buf.write("\u05fb\u05fc\7\33\2\2\u05fc\u05fe\5\22\n\2\u05fd\u05ff")
        buf.write("\5:\36\2\u05fe\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2\u0600")
        buf.write("\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2\2")
        buf.write("\u0602\u0603\5\6\4\2\u0603\u00e7\3\2\2\2\u0604\u060a\5")
        buf.write("T+\2\u0605\u0607\7\\\2\2\u0606\u0608\7e\2\2\u0607\u0606")
        buf.write("\3\2\2\2\u0607\u0608\3\2\2\2\u0608\u0609\3\2\2\2\u0609")
        buf.write("\u060b\5\u00eex\2\u060a\u0605\3\2\2\2\u060a\u060b\3\2")
        buf.write("\2\2\u060b\u00e9\3\2\2\2\u060c\u0618\5\u008cG\2\u060d")
        buf.write("\u0618\5\u008eH\2\u060e\u0618\5\u0090I\2\u060f\u0618\5")
        buf.write("\u0092J\2\u0610\u0618\5\u0094K\2\u0611\u0618\5\u0096L")
        buf.write("\2\u0612\u0618\5\u00e8u\2\u0613\u0618\5\u0086D\2\u0614")
        buf.write("\u0618\5\u008aF\2\u0615\u0618\5\u0088E\2\u0616\u0618\5")
        buf.write("\u00c0a\2\u0617\u060c\3\2\2\2\u0617\u060d\3\2\2\2\u0617")
        buf.write("\u060e\3\2\2\2\u0617\u060f\3\2\2\2\u0617\u0610\3\2\2\2")
        buf.write("\u0617\u0611\3\2\2\2\u0617\u0612\3\2\2\2\u0617\u0613\3")
        buf.write("\2\2\2\u0617\u0614\3\2\2\2\u0617\u0615\3\2\2\2\u0617\u0616")
        buf.write("\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u061b\5\u0084C\2\u061a")
        buf.write("\u0617\3\2\2\2\u061a\u0619\3\2\2\2\u061b\u061d\3\2\2\2")
        buf.write("\u061c\u061e\7e\2\2\u061d\u061c\3\2\2\2\u061d\u061e\3")
        buf.write("\2\2\2\u061e\u00eb\3\2\2\2\u061f\u063d\5\u009aN\2\u0620")
        buf.write("\u063d\5\u009cO\2\u0621\u063d\5\u009eP\2\u0622\u063d\5")
        buf.write("\u00a6T\2\u0623\u063d\5t;\2\u0624\u063d\5\u00acW\2\u0625")
        buf.write("\u063d\5\u00b0Y\2\u0626\u063d\5\u00b2Z\2\u0627\u063d\5")
        buf.write("\u00b4[\2\u0628\u0629\7$\2\2\u0629\u063d\5\u00be`\2\u062a")
        buf.write("\u062b\7\32\2\2\u062b\u063d\5\u00be`\2\u062c\u062d\7K")
        buf.write("\2\2\u062d\u063d\5\u00be`\2\u062e\u062f\7\31\2\2\u062f")
        buf.write("\u063d\5\u00be`\2\u0630\u0631\7,\2\2\u0631\u063d\5\u00be")
        buf.write("`\2\u0632\u0633\7\30\2\2\u0633\u063d\5\u00be`\2\u0634")
        buf.write("\u0635\7/\2\2\u0635\u063d\5\u00c2b\2\u0636\u0637\7\26")
        buf.write("\2\2\u0637\u063d\5\u00c4c\2\u0638\u0639\t\n\2\2\u0639")
        buf.write("\u063d\5\u00c6d\2\u063a\u063d\5\u00e4s\2\u063b\u063d\5")
        buf.write("\u00e6t\2\u063c\u061f\3\2\2\2\u063c\u0620\3\2\2\2\u063c")
        buf.write("\u0621\3\2\2\2\u063c\u0622\3\2\2\2\u063c\u0623\3\2\2\2")
        buf.write("\u063c\u0624\3\2\2\2\u063c\u0625\3\2\2\2\u063c\u0626\3")
        buf.write("\2\2\2\u063c\u0627\3\2\2\2\u063c\u0628\3\2\2\2\u063c\u062a")
        buf.write("\3\2\2\2\u063c\u062c\3\2\2\2\u063c\u062e\3\2\2\2\u063c")
        buf.write("\u0630\3\2\2\2\u063c\u0632\3\2\2\2\u063c\u0634\3\2\2\2")
        buf.write("\u063c\u0636\3\2\2\2\u063c\u0638\3\2\2\2\u063c\u063a\3")
        buf.write("\2\2\2\u063c\u063b\3\2\2\2\u063d\u0640\3\2\2\2\u063e\u0640")
        buf.write("\5\u00eav\2\u063f\u063c\3\2\2\2\u063f\u063e\3\2\2\2\u0640")
        buf.write("\u00ed\3\2\2\2\u0641\u0642\7\u0096\2\2\u0642\u0644\bx")
        buf.write("\1\2\u0643\u0645\5\u00ecw\2\u0644\u0643\3\2\2\2\u0645")
        buf.write("\u0646\3\2\2\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2")
        buf.write("\u0647\u064b\3\2\2\2\u0648\u0649\7\u0096\2\2\u0649\u064c")
        buf.write("\bx\1\2\u064a\u064c\7d\2\2\u064b\u0648\3\2\2\2\u064b\u064a")
        buf.write("\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064e\7\u0097\2\2\u064e")
        buf.write("\u0657\3\2\2\2\u064f\u0651\5\u00eav\2\u0650\u064f\3\2")
        buf.write("\2\2\u0651\u0652\3\2\2\2\u0652\u0650\3\2\2\2\u0652\u0653")
        buf.write("\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0655\7d\2\2\u0655")
        buf.write("\u0657\3\2\2\2\u0656\u0641\3\2\2\2\u0656\u0650\3\2\2\2")
        buf.write("\u0657\u00ef\3\2\2\2\u0658\u0659\t\13\2\2\u0659\u00f1")
        buf.write("\3\2\2\2\u00c7\u00f5\u00fb\u0101\u0105\u0109\u010d\u0111")
        buf.write("\u0118\u011b\u0121\u012a\u012e\u0137\u0141\u014b\u0155")
        buf.write("\u015f\u0169\u0173\u017d\u0187\u0191\u01a2\u01a4\u01a6")
        buf.write("\u01a8\u01ad\u01b3\u01b8\u01c2\u01c6\u01d0\u01d9\u01e0")
        buf.write("\u01e8\u01ec\u0205\u020d\u0219\u021d\u0225\u0229\u022b")
        buf.write("\u022d\u023b\u0241\u0245\u024f\u0253\u025c\u0260\u0265")
        buf.write("\u026c\u0275\u0278\u0286\u0297\u029b\u02a3\u02aa\u02ae")
        buf.write("\u02b2\u02ba\u02be\u02c4\u02ca\u02d2\u02d6\u02dc\u02e2")
        buf.write("\u02ea\u02ee\u02f6\u0300\u0303\u030b\u0310\u0315\u031b")
        buf.write("\u031e\u0324\u0329\u0331\u0335\u0338\u0342\u0353\u0356")
        buf.write("\u035d\u0364\u0369\u0370\u0374\u0393\u0395\u039d\u03a2")
        buf.write("\u03a7\u03b1\u03b9\u03bd\u03c4\u03d2\u03d8\u03dd\u03e2")
        buf.write("\u03e7\u03ec\u03f1\u03f7\u0402\u040b\u0423\u042f\u0438")
        buf.write("\u043d\u0440\u044a\u0454\u045f\u0468\u0472\u047c\u0484")
        buf.write("\u048c\u0493\u04a2\u04ac\u04b2\u04b8\u04bf\u04c4\u04d0")
        buf.write("\u04d3\u04d5\u04da\u04dd\u04e1\u04e5\u04e8\u04ef\u04f6")
        buf.write("\u04f8\u04fd\u0500\u0507\u0509\u050e\u0511\u0518\u051a")
        buf.write("\u051f\u0525\u0534\u0536\u0539\u053d\u0544\u054b\u054f")
        buf.write("\u0556\u0558\u0565\u0571\u057a\u0581\u0584\u058e\u0595")
        buf.write("\u05a0\u05a4\u05a8\u05ab\u05b0\u05b7\u05bc\u05c2\u05c6")
        buf.write("\u05ce\u05d4\u05db\u05e7\u05eb\u05ee\u05f7\u0600\u0607")
        buf.write("\u060a\u0617\u061a\u061d\u063c\u063f\u0646\u064b\u0652")
        buf.write("\u0656")
        return buf.getvalue()


class milestone_2Parser ( Parser ):

    grammarFileName = "milestone_2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'..'", "'`'", "'='", "'[:'", "'{.'", 
                     "'.}'", "'->'", "'shared'", "'addr'", "'var'", "'and'", 
                     "'as'", "'asm'", "'bind'", "'block'", "'break'", "'case'", 
                     "'cast'", "'concept'", "'const'", "'continue'", "'converter'", 
                     "'macro'", "'method'", "'mixin'", "'mod'", "'nil'", 
                     "'not'", "'notin'", "'object'", "'of'", "'or'", "'out'", 
                     "'proc'", "'ptr'", "'raise'", "'ref'", "'return'", 
                     "'shl'", "'shr'", "'static'", "'template'", "'try'", 
                     "'tuple'", "'type'", "'using'", "'when'", "'while'", 
                     "'xor'", "'yield'", "'defer'", "'discard'", "'distinct'", 
                     "'div'", "'do'", "'elif'", "'else'", "'end'", "'enum'", 
                     "'except'", "'export'", "'finally'", "'for'", "'from'", 
                     "'func'", "'if'", "'import'", "'in'", "'include'", 
                     "'interface'", "'is'", "'isnot'", "'iterator'", "'let'", 
                     "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", 
                     "'&'", "'|'", "'~'", "'@'", "'%'", "'!'", "'^'", "'.'", 
                     "':'", "'{'", "'}'", "'('", "')'", "'['", "']'", "','", 
                     "';'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ADDR", "VARIABLE", "AND", "AS", "ASM", 
                      "BIND", "BLOCK", "BREAK", "CASE", "CAST", "CONCEPT", 
                      "CONST", "CONTINUE", "CONVERTER", "MACRO", "METHOD", 
                      "MIXIN", "MOD", "NIL", "NOT", "NOTIN", "OBJECT", "OF", 
                      "OR", "OUT", "PROC", "PTR", "RAISE", "REF", "RETURN", 
                      "SHL", "SHR", "STATIC", "TEMPLATE", "TRY", "TUPLE", 
                      "TYPE", "USING", "WHEN", "WHILE", "XOR", "YIELD", 
                      "DEFER", "DISCARD", "DISTINCT", "DIV", "DO", "ELIF", 
                      "ELSE", "END", "ENUM", "EXCEPT", "EXPORT", "FINALLY", 
                      "FOR", "FROM", "FUNC", "IF", "IMPORT", "IN", "INCLUDE", 
                      "INTERFACE", "IS", "ISNOT", "ITERATOR", "LET", "EQUALS_OPERATOR", 
                      "ADD_OPERATOR", "MINUS_OPERATOR", "MUL_OPERATOR", 
                      "DIV_OPERATOR", "LESS_THAN", "GREATER_THAN", "AND_OPERATOR", 
                      "OR_OPERATOR", "BITWISE_NOT_OPERATOR", "AT", "MODULUS", 
                      "NOT_OPERATOR", "XOR_OPERATOR", "DOT", "COLON", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", 
                      "CLOSE_BRACK", "COMMA", "SEMI_COLON", "COMMENT", "MULTILINE", 
                      "MULTILINE_DOC", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "CHAR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "IDENTIFIER", "FLOAT_LIT", "DIGIT", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", "HEX", 
                      "HEXDIGIT", "OCTDIGIT", "BINDIGIT", "EXP", "FLOAT32_SUFFIX", 
                      "FLOAT32_LIT", "FLOAT64_SUFFIX", "FLOAT64_LIT", "LETTER", 
                      "ALL_ESCAPES", "OP10", "OP9", "OP8", "OP7", "OP6", 
                      "OP5", "OP4", "OP3", "OP2", "OP1", "OP0", "SPACE", 
                      "INDENT", "DEDENT", "KEYW", "IDENT" ]

    RULE_start = 0
    RULE_module = 1
    RULE_comma = 2
    RULE_semicolon = 3
    RULE_colon = 4
    RULE_colcom = 5
    RULE_operator = 6
    RULE_prefixOperator = 7
    RULE_optInd = 8
    RULE_optPar = 9
    RULE_simpleExpr = 10
    RULE_arrowExpr = 11
    RULE_assignExpr = 12
    RULE_orExpr = 13
    RULE_andExpr = 14
    RULE_cmpExpr = 15
    RULE_sliceExpr = 16
    RULE_ampExpr = 17
    RULE_plusExpr = 18
    RULE_mulExpr = 19
    RULE_dollarExpr = 20
    RULE_literal = 21
    RULE_symbol = 22
    RULE_exprColonEqExpr = 23
    RULE_exprList = 24
    RULE_exprColonEqExprList = 25
    RULE_dotExpr = 26
    RULE_explicitGenericInstantiation = 27
    RULE_qualifiedIdent = 28
    RULE_setOrTableConstr = 29
    RULE_castExpr = 30
    RULE_parKeyw = 31
    RULE_par = 32
    RULE_generalizedLit = 33
    RULE_identOrLiteral = 34
    RULE_tupleConstr = 35
    RULE_arrayConstr = 36
    RULE_primarySuffix = 37
    RULE_condExpr = 38
    RULE_ifExpr = 39
    RULE_whenExpr = 40
    RULE_pragma = 41
    RULE_identVis = 42
    RULE_identVisDot = 43
    RULE_identWithPragma = 44
    RULE_identWithPragmaDot = 45
    RULE_declColonEquals = 46
    RULE_identColonEquals = 47
    RULE_inlTupleDecl = 48
    RULE_extTupleDecl = 49
    RULE_tupleClass = 50
    RULE_paramList = 51
    RULE_paramListArrow = 52
    RULE_paramListColon = 53
    RULE_doBlock = 54
    RULE_procExpr = 55
    RULE_distinct = 56
    RULE_forStmt = 57
    RULE_forExpr = 58
    RULE_expr = 59
    RULE_typeKeyw = 60
    RULE_primary = 61
    RULE_typeDesc = 62
    RULE_typeDefAux = 63
    RULE_postExprBlocks = 64
    RULE_exprStmt = 65
    RULE_importStmt = 66
    RULE_includeStmt = 67
    RULE_fromStmt = 68
    RULE_returnStmt = 69
    RULE_raiseStmt = 70
    RULE_yieldStmt = 71
    RULE_discardStmt = 72
    RULE_breakStmt = 73
    RULE_continueStmt = 74
    RULE_condStmt = 75
    RULE_ifStmt = 76
    RULE_whenStmt = 77
    RULE_whileStmt = 78
    RULE_ofBranch = 79
    RULE_ofBranches = 80
    RULE_caseStmt = 81
    RULE_tryStmt = 82
    RULE_tryExpr = 83
    RULE_exceptBlock = 84
    RULE_blockStmt = 85
    RULE_blockExpr = 86
    RULE_staticStmt = 87
    RULE_deferStmt = 88
    RULE_asmStmt = 89
    RULE_genericParam = 90
    RULE_genericParamList = 91
    RULE_pattern = 92
    RULE_indAndComment = 93
    RULE_routine = 94
    RULE_commentStmt = 95
    RULE_section_typeDef = 96
    RULE_section_constant = 97
    RULE_section_variable = 98
    RULE_constant = 99
    RULE_enum_grammer = 100
    RULE_objectWhen = 101
    RULE_objectBranch = 102
    RULE_objectBranches = 103
    RULE_objectCase = 104
    RULE_objectPart = 105
    RULE_object_g = 106
    RULE_typeClassParam = 107
    RULE_typeClass = 108
    RULE_typeDef = 109
    RULE_varTuple = 110
    RULE_colonBody = 111
    RULE_variable = 112
    RULE_bindStmt = 113
    RULE_mixinStmt = 114
    RULE_pragmaStmt = 115
    RULE_simpleStmt = 116
    RULE_complexOrSimpleStmt = 117
    RULE_stmt = 118
    RULE_opr = 119

    ruleNames =  [ "start", "module", "comma", "semicolon", "colon", "colcom", 
                   "operator", "prefixOperator", "optInd", "optPar", "simpleExpr", 
                   "arrowExpr", "assignExpr", "orExpr", "andExpr", "cmpExpr", 
                   "sliceExpr", "ampExpr", "plusExpr", "mulExpr", "dollarExpr", 
                   "literal", "symbol", "exprColonEqExpr", "exprList", "exprColonEqExprList", 
                   "dotExpr", "explicitGenericInstantiation", "qualifiedIdent", 
                   "setOrTableConstr", "castExpr", "parKeyw", "par", "generalizedLit", 
                   "identOrLiteral", "tupleConstr", "arrayConstr", "primarySuffix", 
                   "condExpr", "ifExpr", "whenExpr", "pragma", "identVis", 
                   "identVisDot", "identWithPragma", "identWithPragmaDot", 
                   "declColonEquals", "identColonEquals", "inlTupleDecl", 
                   "extTupleDecl", "tupleClass", "paramList", "paramListArrow", 
                   "paramListColon", "doBlock", "procExpr", "distinct", 
                   "forStmt", "forExpr", "expr", "typeKeyw", "primary", 
                   "typeDesc", "typeDefAux", "postExprBlocks", "exprStmt", 
                   "importStmt", "includeStmt", "fromStmt", "returnStmt", 
                   "raiseStmt", "yieldStmt", "discardStmt", "breakStmt", 
                   "continueStmt", "condStmt", "ifStmt", "whenStmt", "whileStmt", 
                   "ofBranch", "ofBranches", "caseStmt", "tryStmt", "tryExpr", 
                   "exceptBlock", "blockStmt", "blockExpr", "staticStmt", 
                   "deferStmt", "asmStmt", "genericParam", "genericParamList", 
                   "pattern", "indAndComment", "routine", "commentStmt", 
                   "section_typeDef", "section_constant", "section_variable", 
                   "constant", "enum_grammer", "objectWhen", "objectBranch", 
                   "objectBranches", "objectCase", "objectPart", "object_g", 
                   "typeClassParam", "typeClass", "typeDef", "varTuple", 
                   "colonBody", "variable", "bindStmt", "mixinStmt", "pragmaStmt", 
                   "simpleStmt", "complexOrSimpleStmt", "stmt", "opr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    ADDR=9
    VARIABLE=10
    AND=11
    AS=12
    ASM=13
    BIND=14
    BLOCK=15
    BREAK=16
    CASE=17
    CAST=18
    CONCEPT=19
    CONST=20
    CONTINUE=21
    CONVERTER=22
    MACRO=23
    METHOD=24
    MIXIN=25
    MOD=26
    NIL=27
    NOT=28
    NOTIN=29
    OBJECT=30
    OF=31
    OR=32
    OUT=33
    PROC=34
    PTR=35
    RAISE=36
    REF=37
    RETURN=38
    SHL=39
    SHR=40
    STATIC=41
    TEMPLATE=42
    TRY=43
    TUPLE=44
    TYPE=45
    USING=46
    WHEN=47
    WHILE=48
    XOR=49
    YIELD=50
    DEFER=51
    DISCARD=52
    DISTINCT=53
    DIV=54
    DO=55
    ELIF=56
    ELSE=57
    END=58
    ENUM=59
    EXCEPT=60
    EXPORT=61
    FINALLY=62
    FOR=63
    FROM=64
    FUNC=65
    IF=66
    IMPORT=67
    IN=68
    INCLUDE=69
    INTERFACE=70
    IS=71
    ISNOT=72
    ITERATOR=73
    LET=74
    EQUALS_OPERATOR=75
    ADD_OPERATOR=76
    MINUS_OPERATOR=77
    MUL_OPERATOR=78
    DIV_OPERATOR=79
    LESS_THAN=80
    GREATER_THAN=81
    AND_OPERATOR=82
    OR_OPERATOR=83
    BITWISE_NOT_OPERATOR=84
    AT=85
    MODULUS=86
    NOT_OPERATOR=87
    XOR_OPERATOR=88
    DOT=89
    COLON=90
    OPEN_BRACE=91
    CLOSE_BRACE=92
    OPEN_PAREN=93
    CLOSE_PAREN=94
    OPEN_BRACK=95
    CLOSE_BRACK=96
    COMMA=97
    SEMI_COLON=98
    COMMENT=99
    MULTILINE=100
    MULTILINE_DOC=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    CHAR_LIT=105
    GENERALIZED_STR_LIT=106
    GENERALIZED_TRIPLESTR_LIT=107
    IDENTIFIER=108
    FLOAT_LIT=109
    DIGIT=110
    INT_LIT=111
    INT8_LIT=112
    INT16_LIT=113
    INT32_LIT=114
    INT64_LIT=115
    UINT_LIT=116
    UINT8_LIT=117
    UINT16_LIT=118
    UINT32_LIT=119
    UINT64_LIT=120
    HEX_LIT=121
    DEC_LIT=122
    OCT_LIT=123
    BIN_LIT=124
    HEX=125
    HEXDIGIT=126
    OCTDIGIT=127
    BINDIGIT=128
    EXP=129
    FLOAT32_SUFFIX=130
    FLOAT32_LIT=131
    FLOAT64_SUFFIX=132
    FLOAT64_LIT=133
    LETTER=134
    ALL_ESCAPES=135
    OP10=136
    OP9=137
    OP8=138
    OP7=139
    OP6=140
    OP5=141
    OP4=142
    OP3=143
    OP2=144
    OP1=145
    OP0=146
    SPACE=147
    INDENT=148
    DEDENT=149
    KEYW=150
    IDENT=151

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ModuleContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ModuleContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = milestone_2Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BREAK) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.RAISE) | (1 << milestone_2Parser.RETURN) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.YIELD) | (1 << milestone_2Parser.DISCARD) | (1 << milestone_2Parser.DIV))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (milestone_2Parser.FROM - 64)) | (1 << (milestone_2Parser.IMPORT - 64)) | (1 << (milestone_2Parser.IN - 64)) | (1 << (milestone_2Parser.INCLUDE - 64)) | (1 << (milestone_2Parser.IS - 64)) | (1 << (milestone_2Parser.ISNOT - 64)) | (1 << (milestone_2Parser.OPEN_BRACE - 64)) | (1 << (milestone_2Parser.OPEN_PAREN - 64)) | (1 << (milestone_2Parser.OPEN_BRACK - 64)) | (1 << (milestone_2Parser.SEMI_COLON - 64)) | (1 << (milestone_2Parser.COMMENT - 64)) | (1 << (milestone_2Parser.STR_LIT - 64)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.RSTR_LIT - 64)) | (1 << (milestone_2Parser.CHAR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.FLOAT_LIT - 64)) | (1 << (milestone_2Parser.INT_LIT - 64)) | (1 << (milestone_2Parser.INT8_LIT - 64)) | (1 << (milestone_2Parser.INT16_LIT - 64)) | (1 << (milestone_2Parser.INT32_LIT - 64)) | (1 << (milestone_2Parser.INT64_LIT - 64)) | (1 << (milestone_2Parser.UINT_LIT - 64)) | (1 << (milestone_2Parser.UINT8_LIT - 64)) | (1 << (milestone_2Parser.UINT16_LIT - 64)) | (1 << (milestone_2Parser.UINT32_LIT - 64)) | (1 << (milestone_2Parser.UINT64_LIT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.INDENT - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0):
                self.state = 240
                self.module()
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI_COLON(self):
            return self.getToken(milestone_2Parser.SEMI_COLON, 0)

        def INDENT(self):
            return self.getToken(milestone_2Parser.INDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = milestone_2Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 246
                    self.stmt() 
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.SEMI_COLON]:
                self.state = 252
                self.match(milestone_2Parser.SEMI_COLON)
                pass
            elif token in [milestone_2Parser.INDENT]:
                self.state = 253
                self.match(milestone_2Parser.INDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(milestone_2Parser.COMMA, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma" ):
                listener.enterComma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma" ):
                listener.exitComma(self)




    def comma(self):

        localctx = milestone_2Parser.CommaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(milestone_2Parser.COMMA)
            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 258
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemicolonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI_COLON(self):
            return self.getToken(milestone_2Parser.SEMI_COLON, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon" ):
                listener.enterSemicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon" ):
                listener.exitSemicolon(self)




    def semicolon(self):

        localctx = milestone_2Parser.SemicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(milestone_2Parser.SEMI_COLON)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 262
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon" ):
                listener.enterColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon" ):
                listener.exitColon(self)




    def colon(self):

        localctx = milestone_2Parser.ColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_colon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(milestone_2Parser.COLON)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 266
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColcomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colcom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColcom" ):
                listener.enterColcom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColcom" ):
                listener.exitColcom(self)




    def colcom(self):

        localctx = milestone_2Parser.ColcomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_colcom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(milestone_2Parser.COLON)
            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 270
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(milestone_2Parser.OP0, 0)

        def OP1(self):
            return self.getToken(milestone_2Parser.OP1, 0)

        def OP2(self):
            return self.getToken(milestone_2Parser.OP2, 0)

        def OP3(self):
            return self.getToken(milestone_2Parser.OP3, 0)

        def OP4(self):
            return self.getToken(milestone_2Parser.OP4, 0)

        def OP5(self):
            return self.getToken(milestone_2Parser.OP5, 0)

        def OP6(self):
            return self.getToken(milestone_2Parser.OP6, 0)

        def OP7(self):
            return self.getToken(milestone_2Parser.OP7, 0)

        def OP8(self):
            return self.getToken(milestone_2Parser.OP8, 0)

        def OP9(self):
            return self.getToken(milestone_2Parser.OP9, 0)

        def OR(self):
            return self.getToken(milestone_2Parser.OR, 0)

        def XOR(self):
            return self.getToken(milestone_2Parser.XOR, 0)

        def AND(self):
            return self.getToken(milestone_2Parser.AND, 0)

        def IS(self):
            return self.getToken(milestone_2Parser.IS, 0)

        def ISNOT(self):
            return self.getToken(milestone_2Parser.ISNOT, 0)

        def IN(self):
            return self.getToken(milestone_2Parser.IN, 0)

        def NOTIN(self):
            return self.getToken(milestone_2Parser.NOTIN, 0)

        def OF(self):
            return self.getToken(milestone_2Parser.OF, 0)

        def DIV(self):
            return self.getToken(milestone_2Parser.DIV, 0)

        def MOD(self):
            return self.getToken(milestone_2Parser.MOD, 0)

        def SHL(self):
            return self.getToken(milestone_2Parser.SHL, 0)

        def SHR(self):
            return self.getToken(milestone_2Parser.SHR, 0)

        def NOT(self):
            return self.getToken(milestone_2Parser.NOT, 0)

        def STATIC(self):
            return self.getToken(milestone_2Parser.STATIC, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = milestone_2Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (milestone_2Parser.IN - 68)) | (1 << (milestone_2Parser.IS - 68)) | (1 << (milestone_2Parser.ISNOT - 68)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (milestone_2Parser.OP9 - 137)) | (1 << (milestone_2Parser.OP8 - 137)) | (1 << (milestone_2Parser.OP7 - 137)) | (1 << (milestone_2Parser.OP6 - 137)) | (1 << (milestone_2Parser.OP5 - 137)) | (1 << (milestone_2Parser.OP4 - 137)) | (1 << (milestone_2Parser.OP3 - 137)) | (1 << (milestone_2Parser.OP2 - 137)) | (1 << (milestone_2Parser.OP1 - 137)) | (1 << (milestone_2Parser.OP0 - 137)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(milestone_2Parser.OperatorContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = milestone_2Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def INDENT(self):
            return self.getToken(milestone_2Parser.INDENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = milestone_2Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_optInd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 277
                self.match(milestone_2Parser.COMMENT)


            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 280
                self.match(milestone_2Parser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(milestone_2Parser.INDENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_optPar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPar" ):
                listener.enterOptPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPar" ):
                listener.exitOptPar(self)




    def optPar(self):

        localctx = milestone_2Parser.OptParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_optPar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 283
                self.match(milestone_2Parser.INDENT)


            elif la_ == 2:
                self.state = 285
                self.match(milestone_2Parser.INDENT)
     


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ArrowExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ArrowExprContext,i)


        def OP0(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP0)
            else:
                return self.getToken(milestone_2Parser.OP0, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = milestone_2Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.arrowExpr()
            self.state = 296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 290
                    self.match(milestone_2Parser.OP0)
                    self.state = 291
                    self.optInd()
                    self.state = 292
                    self.arrowExpr() 
                self.state = 298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 299
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP1)
            else:
                return self.getToken(milestone_2Parser.OP1, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_arrowExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpr" ):
                listener.enterArrowExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpr" ):
                listener.exitArrowExpr(self)




    def arrowExpr(self):

        localctx = milestone_2Parser.ArrowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arrowExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.assignExpr()
            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 303
                    self.match(milestone_2Parser.OP1)
                    self.state = 304
                    self.optInd()
                    self.state = 305
                    self.assignExpr() 
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP2)
            else:
                return self.getToken(milestone_2Parser.OP2, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = milestone_2Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.orExpr()
            self.state = 319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 313
                    self.match(milestone_2Parser.OP2)
                    self.state = 314
                    self.optInd()
                    self.state = 315
                    self.orExpr() 
                self.state = 321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP3)
            else:
                return self.getToken(milestone_2Parser.OP3, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = milestone_2Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.andExpr()
            self.state = 329
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 323
                    self.match(milestone_2Parser.OP3)
                    self.state = 324
                    self.optInd()
                    self.state = 325
                    self.andExpr() 
                self.state = 331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP4)
            else:
                return self.getToken(milestone_2Parser.OP4, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = milestone_2Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.cmpExpr()
            self.state = 339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 333
                    self.match(milestone_2Parser.OP4)
                    self.state = 334
                    self.optInd()
                    self.state = 335
                    self.cmpExpr() 
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP5)
            else:
                return self.getToken(milestone_2Parser.OP5, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = milestone_2Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.sliceExpr()
            self.state = 349
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 343
                    self.match(milestone_2Parser.OP5)
                    self.state = 344
                    self.optInd()
                    self.state = 345
                    self.sliceExpr() 
                self.state = 351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP6)
            else:
                return self.getToken(milestone_2Parser.OP6, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = milestone_2Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.ampExpr()
            self.state = 359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 353
                    self.match(milestone_2Parser.OP6)
                    self.state = 354
                    self.optInd()
                    self.state = 355
                    self.ampExpr() 
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP7)
            else:
                return self.getToken(milestone_2Parser.OP7, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = milestone_2Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.plusExpr()
            self.state = 369
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 363
                    self.match(milestone_2Parser.OP7)
                    self.state = 364
                    self.optInd()
                    self.state = 365
                    self.plusExpr() 
                self.state = 371
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP8)
            else:
                return self.getToken(milestone_2Parser.OP8, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = milestone_2Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.mulExpr()
            self.state = 379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 373
                    self.match(milestone_2Parser.OP8)
                    self.state = 374
                    self.optInd()
                    self.state = 375
                    self.mulExpr() 
                self.state = 381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP9)
            else:
                return self.getToken(milestone_2Parser.OP9, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = milestone_2Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.dollarExpr()
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 383
                    self.match(milestone_2Parser.OP9)
                    self.state = 384
                    self.optInd()
                    self.state = 385
                    self.dollarExpr() 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP10)
            else:
                return self.getToken(milestone_2Parser.OP10, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = milestone_2Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.primary()
            self.state = 399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    self.match(milestone_2Parser.OP10)
                    self.state = 394
                    self.optInd()
                    self.state = 395
                    self.primary() 
                self.state = 401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(milestone_2Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(milestone_2Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(milestone_2Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(milestone_2Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(milestone_2Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(milestone_2Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(milestone_2Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(milestone_2Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(milestone_2Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(milestone_2Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(milestone_2Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(milestone_2Parser.NIL, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = milestone_2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.NIL or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (milestone_2Parser.STR_LIT - 102)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 102)) | (1 << (milestone_2Parser.RSTR_LIT - 102)) | (1 << (milestone_2Parser.CHAR_LIT - 102)) | (1 << (milestone_2Parser.FLOAT_LIT - 102)) | (1 << (milestone_2Parser.INT_LIT - 102)) | (1 << (milestone_2Parser.INT8_LIT - 102)) | (1 << (milestone_2Parser.INT16_LIT - 102)) | (1 << (milestone_2Parser.INT32_LIT - 102)) | (1 << (milestone_2Parser.INT64_LIT - 102)) | (1 << (milestone_2Parser.UINT_LIT - 102)) | (1 << (milestone_2Parser.UINT8_LIT - 102)) | (1 << (milestone_2Parser.UINT16_LIT - 102)) | (1 << (milestone_2Parser.UINT32_LIT - 102)) | (1 << (milestone_2Parser.UINT64_LIT - 102)) | (1 << (milestone_2Parser.FLOAT32_LIT - 102)) | (1 << (milestone_2Parser.FLOAT64_LIT - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEYW(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.KEYW)
            else:
                return self.getToken(milestone_2Parser.KEYW, i)

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENT)
            else:
                return self.getToken(milestone_2Parser.IDENT, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.LiteralContext,i)


        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OperatorContext,i)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OPEN_PAREN)
            else:
                return self.getToken(milestone_2Parser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.CLOSE_PAREN)
            else:
                return self.getToken(milestone_2Parser.CLOSE_PAREN, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OPEN_BRACK)
            else:
                return self.getToken(milestone_2Parser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.CLOSE_BRACK)
            else:
                return self.getToken(milestone_2Parser.CLOSE_BRACK, i)

        def OPEN_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OPEN_BRACE)
            else:
                return self.getToken(milestone_2Parser.OPEN_BRACE, i)

        def CLOSE_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.CLOSE_BRACE)
            else:
                return self.getToken(milestone_2Parser.CLOSE_BRACE, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = milestone_2Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 404
                self.match(milestone_2Parser.T__1)
                self.state = 420 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 420
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.KEYW]:
                        self.state = 405
                        self.match(milestone_2Parser.KEYW)
                        pass
                    elif token in [milestone_2Parser.IDENT]:
                        self.state = 406
                        self.match(milestone_2Parser.IDENT)
                        pass
                    elif token in [milestone_2Parser.NIL, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                        self.state = 407
                        self.literal()
                        pass
                    elif token in [milestone_2Parser.T__0, milestone_2Parser.T__2, milestone_2Parser.AND, milestone_2Parser.MOD, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.CLOSE_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.CLOSE_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.CLOSE_BRACK, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0]:
                        self.state = 416 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 416
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [milestone_2Parser.T__0, milestone_2Parser.AND, milestone_2Parser.MOD, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0]:
                                    self.state = 408
                                    self.operator()
                                    pass
                                elif token in [milestone_2Parser.OPEN_PAREN]:
                                    self.state = 409
                                    self.match(milestone_2Parser.OPEN_PAREN)
                                    pass
                                elif token in [milestone_2Parser.CLOSE_PAREN]:
                                    self.state = 410
                                    self.match(milestone_2Parser.CLOSE_PAREN)
                                    pass
                                elif token in [milestone_2Parser.OPEN_BRACK]:
                                    self.state = 411
                                    self.match(milestone_2Parser.OPEN_BRACK)
                                    pass
                                elif token in [milestone_2Parser.CLOSE_BRACK]:
                                    self.state = 412
                                    self.match(milestone_2Parser.CLOSE_BRACK)
                                    pass
                                elif token in [milestone_2Parser.OPEN_BRACE]:
                                    self.state = 413
                                    self.match(milestone_2Parser.OPEN_BRACE)
                                    pass
                                elif token in [milestone_2Parser.CLOSE_BRACE]:
                                    self.state = 414
                                    self.match(milestone_2Parser.CLOSE_BRACE)
                                    pass
                                elif token in [milestone_2Parser.T__2]:
                                    self.state = 415
                                    self.match(milestone_2Parser.T__2)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 418 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 422 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__2) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (milestone_2Parser.IN - 68)) | (1 << (milestone_2Parser.IS - 68)) | (1 << (milestone_2Parser.ISNOT - 68)) | (1 << (milestone_2Parser.OPEN_BRACE - 68)) | (1 << (milestone_2Parser.CLOSE_BRACE - 68)) | (1 << (milestone_2Parser.OPEN_PAREN - 68)) | (1 << (milestone_2Parser.CLOSE_PAREN - 68)) | (1 << (milestone_2Parser.OPEN_BRACK - 68)) | (1 << (milestone_2Parser.CLOSE_BRACK - 68)) | (1 << (milestone_2Parser.STR_LIT - 68)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 68)) | (1 << (milestone_2Parser.RSTR_LIT - 68)) | (1 << (milestone_2Parser.CHAR_LIT - 68)) | (1 << (milestone_2Parser.FLOAT_LIT - 68)) | (1 << (milestone_2Parser.INT_LIT - 68)) | (1 << (milestone_2Parser.INT8_LIT - 68)) | (1 << (milestone_2Parser.INT16_LIT - 68)) | (1 << (milestone_2Parser.INT32_LIT - 68)) | (1 << (milestone_2Parser.INT64_LIT - 68)) | (1 << (milestone_2Parser.UINT_LIT - 68)) | (1 << (milestone_2Parser.UINT8_LIT - 68)) | (1 << (milestone_2Parser.UINT16_LIT - 68)) | (1 << (milestone_2Parser.UINT32_LIT - 68)) | (1 << (milestone_2Parser.UINT64_LIT - 68)) | (1 << (milestone_2Parser.FLOAT32_LIT - 68)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (milestone_2Parser.FLOAT64_LIT - 133)) | (1 << (milestone_2Parser.OP9 - 133)) | (1 << (milestone_2Parser.OP8 - 133)) | (1 << (milestone_2Parser.OP7 - 133)) | (1 << (milestone_2Parser.OP6 - 133)) | (1 << (milestone_2Parser.OP5 - 133)) | (1 << (milestone_2Parser.OP4 - 133)) | (1 << (milestone_2Parser.OP3 - 133)) | (1 << (milestone_2Parser.OP2 - 133)) | (1 << (milestone_2Parser.OP1 - 133)) | (1 << (milestone_2Parser.OP0 - 133)) | (1 << (milestone_2Parser.KEYW - 133)) | (1 << (milestone_2Parser.IDENT - 133)))) != 0)):
                        break

                self.state = 424
                self.match(milestone_2Parser.T__1)
                pass
            elif token in [milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.match(milestone_2Parser.IDENT)
                pass
            elif token in [milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.match(milestone_2Parser.KEYW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = milestone_2Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.expr()
            self.state = 433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.COLON]:
                self.state = 430
                self.match(milestone_2Parser.COLON)
                pass
            elif token in [milestone_2Parser.T__2]:
                self.state = 431
                self.match(milestone_2Parser.T__2)
                self.state = 432
                self.expr()
                pass
            elif token in [milestone_2Parser.EOF, milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.T__5, milestone_2Parser.AND, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CASE, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TRY, milestone_2Parser.WHEN, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.CLOSE_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.CLOSE_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.CLOSE_BRACK, milestone_2Parser.COMMA, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.INDENT, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = milestone_2Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 435
                self.expr()
                self.state = 438 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                    break

            self.state = 440
            self.comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprList" ):
                listener.enterExprColonEqExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprList" ):
                listener.exitExprColonEqExprList(self)




    def exprColonEqExprList(self):

        localctx = milestone_2Parser.ExprColonEqExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_exprColonEqExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.exprColonEqExpr()
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 443
                    self.comma()
                    self.state = 444
                    self.exprColonEqExpr() 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMA:
                self.state = 451
                self.comma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def DOT(self):
            return self.getToken(milestone_2Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_dotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpr" ):
                listener.enterDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpr" ):
                listener.exitDotExpr(self)




    def dotExpr(self):

        localctx = milestone_2Parser.DotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.expr()
            self.state = 455
            self.match(milestone_2Parser.DOT)
            self.state = 456
            self.optInd()
            self.state = 462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.state = 457
                self.symbol()
                pass
            elif token in [milestone_2Parser.T__3]:
                self.state = 458
                self.match(milestone_2Parser.T__3)
                self.state = 459
                self.exprList()
                self.state = 460
                self.match(milestone_2Parser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACK, 0)

        def OPEN_PAREN(self):
            return self.getToken(milestone_2Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(milestone_2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_explicitGenericInstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInstantiation" ):
                listener.enterExplicitGenericInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInstantiation" ):
                listener.exitExplicitGenericInstantiation(self)




    def explicitGenericInstantiation(self):

        localctx = milestone_2Parser.ExplicitGenericInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_explicitGenericInstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(milestone_2Parser.T__3)
            self.state = 465
            self.exprList()
            self.state = 466
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 467
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 468
                self.exprColonEqExpr()
                self.state = 469
                self.match(milestone_2Parser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def DOT(self):
            return self.getToken(milestone_2Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = milestone_2Parser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_qualifiedIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.symbol()
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.DOT:
                self.state = 474
                self.match(milestone_2Parser.DOT)
                self.state = 475
                self.optInd()
                self.state = 476
                self.symbol()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOrTableConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(milestone_2Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACE, 0)

        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_setOrTableConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOrTableConstr" ):
                listener.enterSetOrTableConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOrTableConstr" ):
                listener.exitSetOrTableConstr(self)




    def setOrTableConstr(self):

        localctx = milestone_2Parser.SetOrTableConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_setOrTableConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.AND, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CASE, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TRY, milestone_2Parser.WHEN, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.CLOSE_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0):
                    self.state = 481
                    self.exprColonEqExpr()
                    self.state = 482
                    self.comma()
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [milestone_2Parser.COLON]:
                self.state = 489
                self.match(milestone_2Parser.COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 492
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(milestone_2Parser.CAST, 0)

        def OPEN_BRACK(self):
            return self.getToken(milestone_2Parser.OPEN_BRACK, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def optPar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptParContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptParContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACK, 0)

        def OPEN_PAREN(self):
            return self.getToken(milestone_2Parser.OPEN_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(milestone_2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_castExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpr" ):
                listener.enterCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpr" ):
                listener.exitCastExpr(self)




    def castExpr(self):

        localctx = milestone_2Parser.CastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_castExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(milestone_2Parser.CAST)
            self.state = 495
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 496
            self.optInd()
            self.state = 497
            self.typeDesc()
            self.state = 498
            self.optPar()
            self.state = 499
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 500
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 501
            self.optInd()
            self.state = 502
            self.expr()
            self.state = 503
            self.optPar()
            self.state = 504
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(milestone_2Parser.DISCARD, 0)

        def INCLUDE(self):
            return self.getToken(milestone_2Parser.INCLUDE, 0)

        def IF(self):
            return self.getToken(milestone_2Parser.IF, 0)

        def WHILE(self):
            return self.getToken(milestone_2Parser.WHILE, 0)

        def CASE(self):
            return self.getToken(milestone_2Parser.CASE, 0)

        def TRY(self):
            return self.getToken(milestone_2Parser.TRY, 0)

        def FINALLY(self):
            return self.getToken(milestone_2Parser.FINALLY, 0)

        def EXCEPT(self):
            return self.getToken(milestone_2Parser.EXCEPT, 0)

        def FOR(self):
            return self.getToken(milestone_2Parser.FOR, 0)

        def BLOCK(self):
            return self.getToken(milestone_2Parser.BLOCK, 0)

        def CONST(self):
            return self.getToken(milestone_2Parser.CONST, 0)

        def LET(self):
            return self.getToken(milestone_2Parser.LET, 0)

        def WHEN(self):
            return self.getToken(milestone_2Parser.WHEN, 0)

        def VARIABLE(self):
            return self.getToken(milestone_2Parser.VARIABLE, 0)

        def MIXIN(self):
            return self.getToken(milestone_2Parser.MIXIN, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = milestone_2Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.VARIABLE) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CONST) | (1 << milestone_2Parser.MIXIN) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.WHILE) | (1 << milestone_2Parser.DISCARD) | (1 << milestone_2Parser.EXCEPT) | (1 << milestone_2Parser.FINALLY) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.INCLUDE - 66)) | (1 << (milestone_2Parser.LET - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(milestone_2Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(milestone_2Parser.CLOSE_PAREN, 0)

        def AND_OPERATOR(self):
            return self.getToken(milestone_2Parser.AND_OPERATOR, 0)

        def parKeyw(self):
            return self.getTypedRuleContext(milestone_2Parser.ParKeywContext,0)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.SEMI_COLON)
            else:
                return self.getToken(milestone_2Parser.SEMI_COLON, i)

        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def complexOrSimpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ComplexOrSimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ComplexOrSimpleStmtContext,i)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMA)
            else:
                return self.getToken(milestone_2Parser.COMMA, i)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = milestone_2Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_par)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 509
            self.optInd()
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.AND_OPERATOR]:
                self.state = 510
                self.match(milestone_2Parser.AND_OPERATOR)
                self.state = 511
                self.parKeyw()
                self.state = 513 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 512
                    self.complexOrSimpleStmt()
                    self.state = 515 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.VARIABLE) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.ASM) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.BREAK) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.CONST) | (1 << milestone_2Parser.CONVERTER) | (1 << milestone_2Parser.MACRO) | (1 << milestone_2Parser.METHOD) | (1 << milestone_2Parser.MIXIN) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.PROC) | (1 << milestone_2Parser.RAISE) | (1 << milestone_2Parser.RETURN) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TEMPLATE) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.TYPE) | (1 << milestone_2Parser.USING) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.WHILE) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.YIELD) | (1 << milestone_2Parser.DEFER) | (1 << milestone_2Parser.DISCARD) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (milestone_2Parser.FROM - 64)) | (1 << (milestone_2Parser.IF - 64)) | (1 << (milestone_2Parser.IMPORT - 64)) | (1 << (milestone_2Parser.IN - 64)) | (1 << (milestone_2Parser.INCLUDE - 64)) | (1 << (milestone_2Parser.IS - 64)) | (1 << (milestone_2Parser.ISNOT - 64)) | (1 << (milestone_2Parser.ITERATOR - 64)) | (1 << (milestone_2Parser.LET - 64)) | (1 << (milestone_2Parser.OPEN_BRACE - 64)) | (1 << (milestone_2Parser.OPEN_PAREN - 64)) | (1 << (milestone_2Parser.OPEN_BRACK - 64)) | (1 << (milestone_2Parser.COMMENT - 64)) | (1 << (milestone_2Parser.STR_LIT - 64)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.RSTR_LIT - 64)) | (1 << (milestone_2Parser.CHAR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.FLOAT_LIT - 64)) | (1 << (milestone_2Parser.INT_LIT - 64)) | (1 << (milestone_2Parser.INT8_LIT - 64)) | (1 << (milestone_2Parser.INT16_LIT - 64)) | (1 << (milestone_2Parser.INT32_LIT - 64)) | (1 << (milestone_2Parser.INT64_LIT - 64)) | (1 << (milestone_2Parser.UINT_LIT - 64)) | (1 << (milestone_2Parser.UINT8_LIT - 64)) | (1 << (milestone_2Parser.UINT16_LIT - 64)) | (1 << (milestone_2Parser.UINT32_LIT - 64)) | (1 << (milestone_2Parser.UINT64_LIT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                        break

                self.state = 517
                self.match(milestone_2Parser.SEMI_COLON)
                pass
            elif token in [milestone_2Parser.SEMI_COLON]:
                self.state = 519
                self.match(milestone_2Parser.SEMI_COLON)
                self.state = 521 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 520
                    self.complexOrSimpleStmt()
                    self.state = 523 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.VARIABLE) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.ASM) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.BREAK) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.CONST) | (1 << milestone_2Parser.CONVERTER) | (1 << milestone_2Parser.MACRO) | (1 << milestone_2Parser.METHOD) | (1 << milestone_2Parser.MIXIN) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.PROC) | (1 << milestone_2Parser.RAISE) | (1 << milestone_2Parser.RETURN) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TEMPLATE) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.TYPE) | (1 << milestone_2Parser.USING) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.WHILE) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.YIELD) | (1 << milestone_2Parser.DEFER) | (1 << milestone_2Parser.DISCARD) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (milestone_2Parser.FROM - 64)) | (1 << (milestone_2Parser.IF - 64)) | (1 << (milestone_2Parser.IMPORT - 64)) | (1 << (milestone_2Parser.IN - 64)) | (1 << (milestone_2Parser.INCLUDE - 64)) | (1 << (milestone_2Parser.IS - 64)) | (1 << (milestone_2Parser.ISNOT - 64)) | (1 << (milestone_2Parser.ITERATOR - 64)) | (1 << (milestone_2Parser.LET - 64)) | (1 << (milestone_2Parser.OPEN_BRACE - 64)) | (1 << (milestone_2Parser.OPEN_PAREN - 64)) | (1 << (milestone_2Parser.OPEN_BRACK - 64)) | (1 << (milestone_2Parser.COMMENT - 64)) | (1 << (milestone_2Parser.STR_LIT - 64)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.RSTR_LIT - 64)) | (1 << (milestone_2Parser.CHAR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.FLOAT_LIT - 64)) | (1 << (milestone_2Parser.INT_LIT - 64)) | (1 << (milestone_2Parser.INT8_LIT - 64)) | (1 << (milestone_2Parser.INT16_LIT - 64)) | (1 << (milestone_2Parser.INT32_LIT - 64)) | (1 << (milestone_2Parser.INT64_LIT - 64)) | (1 << (milestone_2Parser.UINT_LIT - 64)) | (1 << (milestone_2Parser.UINT8_LIT - 64)) | (1 << (milestone_2Parser.UINT16_LIT - 64)) | (1 << (milestone_2Parser.UINT32_LIT - 64)) | (1 << (milestone_2Parser.UINT64_LIT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                        break

                self.state = 525
                self.match(milestone_2Parser.SEMI_COLON)
                pass
            elif token in [milestone_2Parser.T__4]:
                self.state = 527
                self.pragmaStmt()
                pass
            elif token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.AND, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.state = 528
                self.simpleExpr()
                self.state = 553
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [milestone_2Parser.T__2]:
                    self.state = 529
                    self.match(milestone_2Parser.T__2)
                    self.state = 530
                    self.expr()
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.SEMI_COLON:
                        self.state = 531
                        self.match(milestone_2Parser.SEMI_COLON)
                        self.state = 533 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 532
                            self.complexOrSimpleStmt()
                            self.state = 535 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.VARIABLE) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.ASM) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.BREAK) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.CONST) | (1 << milestone_2Parser.CONVERTER) | (1 << milestone_2Parser.MACRO) | (1 << milestone_2Parser.METHOD) | (1 << milestone_2Parser.MIXIN) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.PROC) | (1 << milestone_2Parser.RAISE) | (1 << milestone_2Parser.RETURN) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TEMPLATE) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.TYPE) | (1 << milestone_2Parser.USING) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.WHILE) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.YIELD) | (1 << milestone_2Parser.DEFER) | (1 << milestone_2Parser.DISCARD) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (milestone_2Parser.FROM - 64)) | (1 << (milestone_2Parser.IF - 64)) | (1 << (milestone_2Parser.IMPORT - 64)) | (1 << (milestone_2Parser.IN - 64)) | (1 << (milestone_2Parser.INCLUDE - 64)) | (1 << (milestone_2Parser.IS - 64)) | (1 << (milestone_2Parser.ISNOT - 64)) | (1 << (milestone_2Parser.ITERATOR - 64)) | (1 << (milestone_2Parser.LET - 64)) | (1 << (milestone_2Parser.OPEN_BRACE - 64)) | (1 << (milestone_2Parser.OPEN_PAREN - 64)) | (1 << (milestone_2Parser.OPEN_BRACK - 64)) | (1 << (milestone_2Parser.COMMENT - 64)) | (1 << (milestone_2Parser.STR_LIT - 64)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.RSTR_LIT - 64)) | (1 << (milestone_2Parser.CHAR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.FLOAT_LIT - 64)) | (1 << (milestone_2Parser.INT_LIT - 64)) | (1 << (milestone_2Parser.INT8_LIT - 64)) | (1 << (milestone_2Parser.INT16_LIT - 64)) | (1 << (milestone_2Parser.INT32_LIT - 64)) | (1 << (milestone_2Parser.INT64_LIT - 64)) | (1 << (milestone_2Parser.UINT_LIT - 64)) | (1 << (milestone_2Parser.UINT8_LIT - 64)) | (1 << (milestone_2Parser.UINT16_LIT - 64)) | (1 << (milestone_2Parser.UINT32_LIT - 64)) | (1 << (milestone_2Parser.UINT64_LIT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                                break

                        self.state = 537
                        self.match(milestone_2Parser.SEMI_COLON)


                    pass
                elif token in [milestone_2Parser.COLON]:
                    self.state = 541
                    self.match(milestone_2Parser.COLON)
                    self.state = 542
                    self.expr()
                    self.state = 551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMA:
                        self.state = 543
                        self.match(milestone_2Parser.COMMA)
                        self.state = 545 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 544
                            self.exprColonEqExpr()
                            self.state = 547 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                                break

                        self.state = 549
                        self.match(milestone_2Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 557
            self.optPar()
            self.state = 558
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = milestone_2Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.GENERALIZED_STR_LIT or _la==milestone_2Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(milestone_2Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(milestone_2Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.ArrayConstrContext,0)


        def setOrTableConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.SetOrTableConstrContext,0)


        def castExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CastExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = milestone_2Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_identOrLiteral)
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 562
                self.generalizedLit()
                pass
            elif token in [milestone_2Parser.T__1, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 563
                self.symbol()
                pass
            elif token in [milestone_2Parser.NIL, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 564
                self.literal()
                pass
            elif token in [milestone_2Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 565
                self.par()
                pass
            elif token in [milestone_2Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 566
                self.arrayConstr()
                pass
            elif token in [milestone_2Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 567
                self.setOrTableConstr()
                pass
            elif token in [milestone_2Parser.CAST]:
                self.enterOuterAlt(localctx, 7)
                self.state = 568
                self.castExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(milestone_2Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(milestone_2Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = milestone_2Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 572
            self.optInd()
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0):
                self.state = 573
                self.exprColonEqExpr()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 574
                    self.comma()


                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 582
            self.optPar()
            self.state = 583
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(milestone_2Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = milestone_2Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 586
            self.optInd()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0):
                self.state = 587
                self.exprColonEqExpr()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 588
                    self.comma()


                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self.optPar()
            self.state = 597
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(milestone_2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(milestone_2Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def doBlock(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlockContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def DOT(self):
            return self.getToken(milestone_2Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def AND_OPERATOR(self):
            return self.getToken(milestone_2Parser.AND_OPERATOR, 0)

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def IDENT(self):
            return self.getToken(milestone_2Parser.IDENT, 0)

        def literal(self):
            return self.getTypedRuleContext(milestone_2Parser.LiteralContext,0)


        def CAST(self):
            return self.getToken(milestone_2Parser.CAST, 0)

        def ADDR(self):
            return self.getToken(milestone_2Parser.ADDR, 0)

        def TYPE(self):
            return self.getToken(milestone_2Parser.TYPE, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = milestone_2Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0):
                    self.state = 600
                    self.exprColonEqExpr()
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMA:
                        self.state = 601
                        self.comma()


                    self.state = 608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 609
                self.match(milestone_2Parser.CLOSE_PAREN)
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 610
                    self.doBlock()


                pass
            elif token in [milestone_2Parser.DO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.doBlock()
                pass
            elif token in [milestone_2Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 614
                self.match(milestone_2Parser.DOT)
                self.state = 615
                self.optInd()
                self.state = 616
                self.symbol()
                self.state = 618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 617
                    self.generalizedLit()


                pass
            elif token in [milestone_2Parser.AND_OPERATOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 620
                self.match(milestone_2Parser.AND_OPERATOR)
                self.state = 627
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [milestone_2Parser.T__1]:
                    self.state = 621
                    self.match(milestone_2Parser.T__1)
                    pass
                elif token in [milestone_2Parser.IDENT]:
                    self.state = 622
                    self.match(milestone_2Parser.IDENT)
                    pass
                elif token in [milestone_2Parser.NIL, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                    self.state = 623
                    self.literal()
                    pass
                elif token in [milestone_2Parser.CAST]:
                    self.state = 624
                    self.match(milestone_2Parser.CAST)
                    pass
                elif token in [milestone_2Parser.ADDR]:
                    self.state = 625
                    self.match(milestone_2Parser.ADDR)
                    pass
                elif token in [milestone_2Parser.TYPE]:
                    self.state = 626
                    self.match(milestone_2Parser.TYPE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 629
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def ELSE(self):
            return self.getToken(milestone_2Parser.ELSE, 0)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.ELIF)
            else:
                return self.getToken(milestone_2Parser.ELIF, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = milestone_2Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.expr()
            self.state = 633
            self.colcom()
            self.state = 634
            self.expr()
            self.state = 635
            self.optInd()
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.ELIF:
                self.state = 636
                self.match(milestone_2Parser.ELIF)
                self.state = 637
                self.expr()
                self.state = 638
                self.colcom()
                self.state = 639
                self.expr()
                self.state = 640
                self.optInd()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            self.match(milestone_2Parser.ELSE)
            self.state = 648
            self.colcom()
            self.state = 649
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(milestone_2Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = milestone_2Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(milestone_2Parser.IF)
            self.state = 652
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(milestone_2Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = milestone_2Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(milestone_2Parser.WHEN)
            self.state = 655
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACE, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = milestone_2Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(milestone_2Parser.T__4)
            self.state = 658
            self.optInd()
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0):
                self.state = 659
                self.exprColonEqExpr()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 660
                    self.comma()


                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 668
            self.optPar()
            self.state = 669
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.T__5 or _la==milestone_2Parser.CLOSE_BRACE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = milestone_2Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_identVis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.symbol()
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 672
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def DOT(self):
            return self.getToken(milestone_2Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVisDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVisDot" ):
                listener.enterIdentVisDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVisDot" ):
                listener.exitIdentVisDot(self)




    def identVisDot(self):

        localctx = milestone_2Parser.IdentVisDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_identVisDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.symbol()
            self.state = 676
            self.match(milestone_2Parser.DOT)
            self.state = 677
            self.optInd()
            self.state = 678
            self.symbol()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (milestone_2Parser.MOD - 26)) | (1 << (milestone_2Parser.DIV - 26)) | (1 << (milestone_2Parser.EQUALS_OPERATOR - 26)) | (1 << (milestone_2Parser.ADD_OPERATOR - 26)) | (1 << (milestone_2Parser.MINUS_OPERATOR - 26)) | (1 << (milestone_2Parser.MUL_OPERATOR - 26)) | (1 << (milestone_2Parser.DIV_OPERATOR - 26)) | (1 << (milestone_2Parser.OR_OPERATOR - 26)))) != 0):
                self.state = 679
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragma" ):
                listener.enterIdentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragma" ):
                listener.exitIdentWithPragma(self)




    def identWithPragma(self):

        localctx = milestone_2Parser.IdentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_identWithPragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.identVis()
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 683
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVisDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisDotContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragmaDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragmaDot" ):
                listener.enterIdentWithPragmaDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragmaDot" ):
                listener.exitIdentWithPragmaDot(self)




    def identWithPragmaDot(self):

        localctx = milestone_2Parser.IdentWithPragmaDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_identWithPragmaDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.identVisDot()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 687
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_declColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclColonEquals" ):
                listener.enterDeclColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclColonEquals" ):
                listener.exitDeclColonEquals(self)




    def declColonEquals(self):

        localctx = milestone_2Parser.DeclColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_declColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.identWithPragma()
            self.state = 696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 691
                    self.comma()
                    self.state = 692
                    self.identWithPragma() 
                self.state = 698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 699
                self.comma()


            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 702
                self.match(milestone_2Parser.COLON)
                self.state = 703
                self.optInd()
                self.state = 704
                self.typeDesc()


            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 708
                self.match(milestone_2Parser.T__2)
                self.state = 709
                self.optInd()
                self.state = 710
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENT)
            else:
                return self.getToken(milestone_2Parser.IDENT, i)

        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentColonEquals" ):
                listener.enterIdentColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentColonEquals" ):
                listener.exitIdentColonEquals(self)




    def identColonEquals(self):

        localctx = milestone_2Parser.IdentColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_identColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(milestone_2Parser.IDENT)
            self.state = 720
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 715
                    self.comma()
                    self.state = 716
                    self.match(milestone_2Parser.IDENT) 
                self.state = 722
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 723
                self.comma()


            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 726
                self.match(milestone_2Parser.COLON)
                self.state = 727
                self.optInd()
                self.state = 728
                self.typeDesc()


            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 732
                self.match(milestone_2Parser.T__2)
                self.state = 733
                self.optInd()
                self.state = 734
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TUPLE(self):
            return self.getToken(milestone_2Parser.TUPLE, 0)

        def OPEN_BRACK(self):
            return self.getToken(milestone_2Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACK, 0)

        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_inlTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlTupleDecl" ):
                listener.enterInlTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlTupleDecl" ):
                listener.exitInlTupleDecl(self)




    def inlTupleDecl(self):

        localctx = milestone_2Parser.InlTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_inlTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(milestone_2Parser.TUPLE)
            self.state = 739
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 740
            self.optInd()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 741
                self.identColonEquals()
                self.state = 744
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [milestone_2Parser.COMMA]:
                    self.state = 742
                    self.comma()
                    pass
                elif token in [milestone_2Parser.SEMI_COLON]:
                    self.state = 743
                    self.semicolon()
                    pass
                elif token in [milestone_2Parser.CLOSE_BRACK, milestone_2Parser.INDENT, milestone_2Parser.IDENT]:
                    pass
                else:
                    pass
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 751
            self.optPar()
            self.state = 752
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TUPLE(self):
            return self.getToken(milestone_2Parser.TUPLE, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_extTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtTupleDecl" ):
                listener.enterExtTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtTupleDecl" ):
                listener.exitExtTupleDecl(self)




    def extTupleDecl(self):

        localctx = milestone_2Parser.ExtTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_extTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(milestone_2Parser.TUPLE)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 755
                self.match(milestone_2Parser.COMMENT)


            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.INDENT:
                self.state = 758
                self.match(milestone_2Parser.INDENT)
   
                self.state = 760
                self.identColonEquals()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.INDENT:
                    self.state = 761
                    self.match(milestone_2Parser.INDENT)
                 
                    self.state = 763
                    self.identColonEquals()
                    self.state = 768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TUPLE(self):
            return self.getToken(milestone_2Parser.TUPLE, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleClass" ):
                listener.enterTupleClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleClass" ):
                listener.exitTupleClass(self)




    def tupleClass(self):

        localctx = milestone_2Parser.TupleClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_tupleClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(milestone_2Parser.TUPLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(milestone_2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(milestone_2Parser.CLOSE_PAREN, 0)

        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def semicolon(self):
            return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,0)


        def declColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DeclColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = milestone_2Parser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT:
                self.state = 774
                self.declColonEquals()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.COMMA]:
                self.state = 780
                self.comma()
                pass
            elif token in [milestone_2Parser.SEMI_COLON]:
                self.state = 781
                self.semicolon()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 784
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListArrowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListArrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListArrow" ):
                listener.enterParamListArrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListArrow" ):
                listener.exitParamListArrow(self)




    def paramListArrow(self):

        localctx = milestone_2Parser.ParamListArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_paramListArrow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 786
                self.paramList()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 789
                self.match(milestone_2Parser.T__6)
                self.state = 790
                self.optInd()
                self.state = 791
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListColon" ):
                listener.enterParamListColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListColon" ):
                listener.exitParamListColon(self)




    def paramListColon(self):

        localctx = milestone_2Parser.ParamListColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_paramListColon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 795
                self.paramList()


            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 798
                self.match(milestone_2Parser.COLON)
                self.state = 799
                self.optInd()
                self.state = 800
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(milestone_2Parser.DO, 0)

        def paramListArrow(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListArrowContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_doBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoBlock" ):
                listener.enterDoBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoBlock" ):
                listener.exitDoBlock(self)




    def doBlock(self):

        localctx = milestone_2Parser.DoBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_doBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(milestone_2Parser.DO)
            self.state = 805
            self.paramListArrow()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 806
                self.pragmaStmt()


            self.state = 809
            self.colcom()
            self.state = 810
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self):
            return self.getToken(milestone_2Parser.PROC, 0)

        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_procExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcExpr" ):
                listener.enterProcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcExpr" ):
                listener.exitProcExpr(self)




    def procExpr(self):

        localctx = milestone_2Parser.ProcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_procExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(milestone_2Parser.PROC)
            self.state = 813
            self.paramListColon()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 814
                self.pragmaStmt()


            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 817
                self.match(milestone_2Parser.T__2)
                self.state = 819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 818
                    self.match(milestone_2Parser.COMMENT)


                self.state = 821
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(milestone_2Parser.DISTINCT, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct" ):
                listener.enterDistinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct" ):
                listener.exitDistinct(self)




    def distinct(self):

        localctx = milestone_2Parser.DistinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_distinct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(milestone_2Parser.DISTINCT)
            self.state = 825
            self.optInd()
            self.state = 826
            self.typeDesc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(milestone_2Parser.FOR, 0)

        def IN(self):
            return self.getToken(milestone_2Parser.IN, 0)

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = milestone_2Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(milestone_2Parser.FOR)

            self.state = 830 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 829
                self.identWithPragma()
                self.state = 832 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT):
                    break

            self.state = 834
            self.comma()
            self.state = 836
            self.match(milestone_2Parser.IN)
            self.state = 837
            self.expr()
            self.state = 838
            self.colcom()
            self.state = 839
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = milestone_2Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.BlockExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.WhenExprContext,0)


        def CASE(self):
            return self.getToken(milestone_2Parser.CASE, 0)

        def forExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ForExprContext,0)


        def tryExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.TryExprContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = milestone_2Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expr)
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.BLOCK, milestone_2Parser.CASE, milestone_2Parser.TRY, milestone_2Parser.WHEN, milestone_2Parser.FOR, milestone_2Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [milestone_2Parser.BLOCK]:
                    self.state = 843
                    self.blockExpr()
                    pass
                elif token in [milestone_2Parser.IF]:
                    self.state = 844
                    self.ifExpr()
                    pass
                elif token in [milestone_2Parser.WHEN]:
                    self.state = 845
                    self.whenExpr()
                    pass
                elif token in [milestone_2Parser.CASE]:
                    self.state = 846
                    self.match(milestone_2Parser.CASE)
                    pass
                elif token in [milestone_2Parser.FOR]:
                    self.state = 847
                    self.forExpr()
                    pass
                elif token in [milestone_2Parser.TRY]:
                    self.state = 848
                    self.tryExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.AND, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 851
                self.simpleExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(milestone_2Parser.VARIABLE, 0)

        def OUT(self):
            return self.getToken(milestone_2Parser.OUT, 0)

        def REF(self):
            return self.getToken(milestone_2Parser.REF, 0)

        def PTR(self):
            return self.getToken(milestone_2Parser.PTR, 0)

        def TUPLE(self):
            return self.getToken(milestone_2Parser.TUPLE, 0)

        def PROC(self):
            return self.getToken(milestone_2Parser.PROC, 0)

        def ITERATOR(self):
            return self.getToken(milestone_2Parser.ITERATOR, 0)

        def DISTINCT(self):
            return self.getToken(milestone_2Parser.DISTINCT, 0)

        def OBJECT(self):
            return self.getToken(milestone_2Parser.OBJECT, 0)

        def ENUM(self):
            return self.getToken(milestone_2Parser.ENUM, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = milestone_2Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__7) | (1 << milestone_2Parser.VARIABLE) | (1 << milestone_2Parser.OBJECT) | (1 << milestone_2Parser.OUT) | (1 << milestone_2Parser.PROC) | (1 << milestone_2Parser.PTR) | (1 << milestone_2Parser.REF) | (1 << milestone_2Parser.TUPLE) | (1 << milestone_2Parser.DISTINCT) | (1 << milestone_2Parser.ENUM))) != 0) or _la==milestone_2Parser.ITERATOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identOrLiteral(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentOrLiteralContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrefixOperatorContext,i)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrimarySuffixContext,i)


        def BIND(self):
            return self.getToken(milestone_2Parser.BIND, 0)

        def primary(self):
            return self.getTypedRuleContext(milestone_2Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = milestone_2Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.AND, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (milestone_2Parser.IN - 68)) | (1 << (milestone_2Parser.IS - 68)) | (1 << (milestone_2Parser.ISNOT - 68)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (milestone_2Parser.OP9 - 137)) | (1 << (milestone_2Parser.OP8 - 137)) | (1 << (milestone_2Parser.OP7 - 137)) | (1 << (milestone_2Parser.OP6 - 137)) | (1 << (milestone_2Parser.OP5 - 137)) | (1 << (milestone_2Parser.OP4 - 137)) | (1 << (milestone_2Parser.OP3 - 137)) | (1 << (milestone_2Parser.OP2 - 137)) | (1 << (milestone_2Parser.OP1 - 137)) | (1 << (milestone_2Parser.OP0 - 137)))) != 0):
                    self.state = 856
                    self.prefixOperator()
                    self.state = 861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 862
                self.identOrLiteral()
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 863
                        self.primarySuffix() 
                    self.state = 868
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass
            elif token in [milestone_2Parser.BIND]:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.match(milestone_2Parser.BIND)
                self.state = 870
                self.primary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = milestone_2Parser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefAuxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def CONCEPT(self):
            return self.getToken(milestone_2Parser.CONCEPT, 0)

        def typeClass(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeClassContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDefAux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefAux" ):
                listener.enterTypeDefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefAux" ):
                listener.exitTypeDefAux(self)




    def typeDefAux(self):

        localctx = milestone_2Parser.TypeDefAuxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeDefAux)
        try:
            self.state = 878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.AND, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 875
                self.simpleExpr()
                pass
            elif token in [milestone_2Parser.CONCEPT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.match(milestone_2Parser.CONCEPT)
                self.state = 877
                self.typeClass()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostExprBlocksContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COLON)
            else:
                return self.getToken(milestone_2Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def doBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DoBlockContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DoBlockContext,i)


        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OF)
            else:
                return self.getToken(milestone_2Parser.OF, i)

        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.ELIF)
            else:
                return self.getToken(milestone_2Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.EXCEPT)
            else:
                return self.getToken(milestone_2Parser.EXCEPT, i)

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.ELSE)
            else:
                return self.getToken(milestone_2Parser.ELSE, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_postExprBlocks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostExprBlocks" ):
                listener.enterPostExprBlocks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostExprBlocks" ):
                listener.exitPostExprBlocks(self)




    def postExprBlocks(self):

        localctx = milestone_2Parser.PostExprBlocksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_postExprBlocks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(milestone_2Parser.COLON)
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 881
                self.stmt()


            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.INDENT:
                self.state = 913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 884
                    self.match(milestone_2Parser.INDENT)

                    self.state = 886
                    self.doBlock()
                    pass

                elif la_ == 2:
                    self.state = 887
                    self.match(milestone_2Parser.INDENT)
                    self.state = 889
                    self.match(milestone_2Parser.OF)
                    self.state = 890
                    self.exprList()
                    self.state = 891
                    self.match(milestone_2Parser.COLON)
                    self.state = 892
                    self.stmt()
                    pass

                elif la_ == 3:
                    self.state = 894
                    self.match(milestone_2Parser.INDENT)
                    =
                    self.state = 896
                    self.match(milestone_2Parser.ELIF)
                    self.state = 897
                    self.expr()
                    self.state = 898
                    self.match(milestone_2Parser.COLON)
                    self.state = 899
                    self.stmt()
                    pass

                elif la_ == 4:
                    self.state = 901
                    self.match(milestone_2Parser.INDENT)
                    =
                    self.state = 903
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 904
                    self.exprList()
                    self.state = 905
                    self.match(milestone_2Parser.COLON)
                    self.state = 906
                    self.stmt()
                    pass

                elif la_ == 5:
                    self.state = 908
                    self.match(milestone_2Parser.INDENT)
                    self.state = 910
                    self.match(milestone_2Parser.ELSE)
                    self.state = 911
                    self.match(milestone_2Parser.COLON)
                    self.state = 912
                    self.stmt()
                    pass


                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def doBlock(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlockContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = milestone_2Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_exprStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.simpleExpr()
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 919
                self.match(milestone_2Parser.T__2)
                self.state = 920
                self.optInd()
                self.state = 921
                self.expr()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COLON:
                    self.state = 922
                    self.colonBody()



            elif la_ == 2:
                self.state = 926 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 925
                    self.expr()
                    self.state = 928 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                        break

                self.state = 930
                self.comma()
                self.state = 931
                self.doBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(milestone_2Parser.IMPORT, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def EXCEPT(self):
            return self.getToken(milestone_2Parser.EXCEPT, 0)

        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = milestone_2Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_importStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(milestone_2Parser.IMPORT)
            self.state = 936
            self.optInd()
            self.state = 937
            self.expr()
            self.state = 955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.T__4, milestone_2Parser.VARIABLE, milestone_2Parser.AND, milestone_2Parser.ASM, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.BREAK, milestone_2Parser.CAST, milestone_2Parser.CONST, milestone_2Parser.CONVERTER, milestone_2Parser.MACRO, milestone_2Parser.METHOD, milestone_2Parser.MIXIN, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.PROC, milestone_2Parser.RAISE, milestone_2Parser.RETURN, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TEMPLATE, milestone_2Parser.TRY, milestone_2Parser.TYPE, milestone_2Parser.USING, milestone_2Parser.WHEN, milestone_2Parser.WHILE, milestone_2Parser.XOR, milestone_2Parser.YIELD, milestone_2Parser.DEFER, milestone_2Parser.DISCARD, milestone_2Parser.DIV, milestone_2Parser.FOR, milestone_2Parser.FROM, milestone_2Parser.IF, milestone_2Parser.IMPORT, milestone_2Parser.IN, milestone_2Parser.INCLUDE, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.LET, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.COMMA, milestone_2Parser.SEMI_COLON, milestone_2Parser.COMMENT, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.INDENT, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA:
                    self.state = 938
                    self.comma()
                    self.state = 939
                    self.expr()
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [milestone_2Parser.EXCEPT]:
                self.state = 946
                self.match(milestone_2Parser.EXCEPT)
                self.state = 947
                self.optInd()

                self.state = 949 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 948
                    self.expr()
                    self.state = 951 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                        break

                self.state = 953
                self.comma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(milestone_2Parser.INCLUDE, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_includeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStmt" ):
                listener.enterIncludeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStmt" ):
                listener.exitIncludeStmt(self)




    def includeStmt(self):

        localctx = milestone_2Parser.IncludeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_includeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(milestone_2Parser.INCLUDE)
            self.state = 958
            self.optInd()
            self.state = 960 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 959
                self.expr()
                self.state = 962 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.CASE) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.OPEN_BRACE - 66)) | (1 << (milestone_2Parser.OPEN_PAREN - 66)) | (1 << (milestone_2Parser.OPEN_BRACK - 66)) | (1 << (milestone_2Parser.STR_LIT - 66)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.RSTR_LIT - 66)) | (1 << (milestone_2Parser.CHAR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 66)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 66)) | (1 << (milestone_2Parser.FLOAT_LIT - 66)) | (1 << (milestone_2Parser.INT_LIT - 66)) | (1 << (milestone_2Parser.INT8_LIT - 66)) | (1 << (milestone_2Parser.INT16_LIT - 66)) | (1 << (milestone_2Parser.INT32_LIT - 66)) | (1 << (milestone_2Parser.INT64_LIT - 66)) | (1 << (milestone_2Parser.UINT_LIT - 66)) | (1 << (milestone_2Parser.UINT8_LIT - 66)) | (1 << (milestone_2Parser.UINT16_LIT - 66)) | (1 << (milestone_2Parser.UINT32_LIT - 66)) | (1 << (milestone_2Parser.UINT64_LIT - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                    break

            self.state = 964
            self.comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(milestone_2Parser.FROM, 0)

        def LETTER(self):
            return self.getToken(milestone_2Parser.LETTER, 0)

        def IMPORT(self):
            return self.getToken(milestone_2Parser.IMPORT, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = milestone_2Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_fromStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(milestone_2Parser.FROM)
            self.state = 967
            self.match(milestone_2Parser.LETTER)
            self.state = 968
            self.match(milestone_2Parser.IMPORT)
            self.state = 969
            self.optInd()
            self.state = 970
            self.expr()
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 971
                self.comma()
                self.state = 972
                self.expr()
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(milestone_2Parser.RETURN, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = milestone_2Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(milestone_2Parser.RETURN)
            self.state = 980
            self.optInd()
            self.state = 982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 981
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(milestone_2Parser.RAISE, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_raiseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStmt" ):
                listener.enterRaiseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStmt" ):
                listener.exitRaiseStmt(self)




    def raiseStmt(self):

        localctx = milestone_2Parser.RaiseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_raiseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(milestone_2Parser.RAISE)
            self.state = 985
            self.optInd()
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 986
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(milestone_2Parser.YIELD, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_yieldStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStmt" ):
                listener.enterYieldStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStmt" ):
                listener.exitYieldStmt(self)




    def yieldStmt(self):

        localctx = milestone_2Parser.YieldStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_yieldStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(milestone_2Parser.YIELD)
            self.state = 990
            self.optInd()
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 991
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(milestone_2Parser.DISCARD, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = milestone_2Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(milestone_2Parser.DISCARD)
            self.state = 995
            self.optInd()
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 996
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(milestone_2Parser.BREAK, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = milestone_2Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(milestone_2Parser.BREAK)
            self.state = 1000
            self.optInd()
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1001
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(milestone_2Parser.BREAK, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = milestone_2Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(milestone_2Parser.BREAK)
            self.state = 1005
            self.optInd()
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1006
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.ELIF)
            else:
                return self.getToken(milestone_2Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(milestone_2Parser.ELSE, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = milestone_2Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.expr()
            self.state = 1010
            self.colcom()
            self.state = 1011
            self.stmt()
            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1012
                self.match(milestone_2Parser.COMMENT)


            self.state = 1024
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1015
                    self.match(milestone_2Parser.INDENT)
                    =
                    self.state = 1017
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1018
                    self.expr()
                    self.state = 1019
                    self.colcom()
                    self.state = 1020
                    self.stmt() 
                self.state = 1026
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1027
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1029
                self.match(milestone_2Parser.ELSE)
                self.state = 1030
                self.colcom()
                self.state = 1031
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(milestone_2Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = milestone_2Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(milestone_2Parser.IF)
            self.state = 1036
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(milestone_2Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = milestone_2Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(milestone_2Parser.WHEN)
            self.state = 1039
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(milestone_2Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = milestone_2Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(milestone_2Parser.WHILE)
            self.state = 1042
            self.expr()
            self.state = 1043
            self.colcom()
            self.state = 1044
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(milestone_2Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = milestone_2Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(milestone_2Parser.OF)
            self.state = 1047
            self.exprList()
            self.state = 1048
            self.colcom()
            self.state = 1049
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OfBranchContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.ELIF)
            else:
                return self.getToken(milestone_2Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def ELSE(self):
            return self.getToken(milestone_2Parser.ELSE, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = milestone_2Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_ofBranches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.ofBranch()
            self.state = 1057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1052
                    self.match(milestone_2Parser.INDENT)
                    =
                    self.state = 1054
                    self.ofBranch() 
                self.state = 1059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 1069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1060
                    self.match(milestone_2Parser.INDENT)
                    =
                    self.state = 1062
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1063
                    self.expr()
                    self.state = 1064
                    self.colcom()
                    self.state = 1065
                    self.stmt() 
                self.state = 1071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.INDENT:
                self.state = 1072
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1074
                self.match(milestone_2Parser.ELSE)
                self.state = 1075
                self.colcom()
                self.state = 1076
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(milestone_2Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def INDENT(self):
            return self.getToken(milestone_2Parser.INDENT, 0)

        def ofBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.OfBranchesContext,0)


        def DEDENT(self):
            return self.getToken(milestone_2Parser.DEDENT, 0)

        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = milestone_2Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(milestone_2Parser.CASE)
            self.state = 1081
            self.expr()
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1082
                self.match(milestone_2Parser.COLON)


            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1085
                self.match(milestone_2Parser.COMMENT)


            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1088
                self.match(milestone_2Parser.INDENT)
                >
                self.state = 1090
                self.ofBranches()
                self.state = 1091
                self.match(milestone_2Parser.DEDENT)
                pass

            elif la_ == 2:
                self.state = 1093
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1095
                self.ofBranches()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(milestone_2Parser.TRY, 0)

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def AND_OPERATOR(self):
            return self.getToken(milestone_2Parser.AND_OPERATOR, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.EXCEPT)
            else:
                return self.getToken(milestone_2Parser.EXCEPT, i)

        def FINALLY(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.FINALLY)
            else:
                return self.getToken(milestone_2Parser.FINALLY, i)

        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStmt" ):
                listener.enterTryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStmt" ):
                listener.exitTryStmt(self)




    def tryStmt(self):

        localctx = milestone_2Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tryStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(milestone_2Parser.TRY)
            self.state = 1099
            self.colcom()
            self.state = 1100
            self.stmt()
            self.state = 1101
            self.match(milestone_2Parser.AND_OPERATOR)
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.INDENT]:
                self.state = 1102
                self.match(milestone_2Parser.INDENT)
                self.state = 1103
                if not =:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "=")
                self.state = 1104
                self.match(milestone_2Parser.EXCEPT)
                pass
            elif token in [milestone_2Parser.FINALLY]:
                self.state = 1105
                self.match(milestone_2Parser.FINALLY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1117
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1108
                    self.match(milestone_2Parser.INDENT)
                    self.state = 1109
                    if not =:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "=")
                    self.state = 1110
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 1111
                    self.exprList()
                    self.state = 1112
                    self.colcom()
                    self.state = 1113
                    self.stmt() 
                self.state = 1119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1120
                self.match(milestone_2Parser.INDENT)
                self.state = 1121
                if not =:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "=")
                self.state = 1122
                self.match(milestone_2Parser.FINALLY)
                self.state = 1123
                self.colcom()
                self.state = 1124
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(milestone_2Parser.TRY, 0)

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def AND_OPERATOR(self):
            return self.getToken(milestone_2Parser.AND_OPERATOR, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.EXCEPT)
            else:
                return self.getToken(milestone_2Parser.EXCEPT, i)

        def FINALLY(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.FINALLY)
            else:
                return self.getToken(milestone_2Parser.FINALLY, i)

        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpr" ):
                listener.enterTryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpr" ):
                listener.exitTryExpr(self)




    def tryExpr(self):

        localctx = milestone_2Parser.TryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tryExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(milestone_2Parser.TRY)
            self.state = 1129
            self.colcom()
            self.state = 1130
            self.stmt()
            self.state = 1131
            self.match(milestone_2Parser.AND_OPERATOR)
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.EXCEPT, milestone_2Parser.COMMENT, milestone_2Parser.INDENT]:
                self.state = 1132
                self.optInd()
                self.state = 1133
                self.match(milestone_2Parser.EXCEPT)
                pass
            elif token in [milestone_2Parser.FINALLY]:
                self.state = 1135
                self.match(milestone_2Parser.FINALLY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1146
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1138
                    self.optInd()
                    self.state = 1139
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 1140
                    self.exprList()
                    self.state = 1141
                    self.colcom()
                    self.state = 1142
                    self.stmt() 
                self.state = 1148
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 1154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1149
                self.optInd()
                self.state = 1150
                self.match(milestone_2Parser.FINALLY)
                self.state = 1151
                self.colcom()
                self.state = 1152
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(milestone_2Parser.EXCEPT, 0)

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = milestone_2Parser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_exceptBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(milestone_2Parser.EXCEPT)
            self.state = 1157
            self.colcom()
            self.state = 1158
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(milestone_2Parser.BLOCK, 0)

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = milestone_2Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(milestone_2Parser.BLOCK)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT:
                self.state = 1161
                self.symbol()


            self.state = 1164
            self.colcom()
            self.state = 1165
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(milestone_2Parser.BLOCK, 0)

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = milestone_2Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(milestone_2Parser.BLOCK)
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT:
                self.state = 1168
                self.symbol()


            self.state = 1171
            self.colcom()
            self.state = 1172
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(milestone_2Parser.STATIC, 0)

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_staticStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticStmt" ):
                listener.enterStaticStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticStmt" ):
                listener.exitStaticStmt(self)




    def staticStmt(self):

        localctx = milestone_2Parser.StaticStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_staticStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(milestone_2Parser.STATIC)
            self.state = 1175
            self.colcom()
            self.state = 1176
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeferStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFER(self):
            return self.getToken(milestone_2Parser.DEFER, 0)

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)




    def deferStmt(self):

        localctx = milestone_2Parser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(milestone_2Parser.DEFER)
            self.state = 1179
            self.colcom()
            self.state = 1180
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASM(self):
            return self.getToken(milestone_2Parser.ASM, 0)

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_asmStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmStmt" ):
                listener.enterAsmStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmStmt" ):
                listener.exitAsmStmt(self)




    def asmStmt(self):

        localctx = milestone_2Parser.AsmStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_asmStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(milestone_2Parser.ASM)
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 1183
                self.pragma()


            self.state = 1186
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (milestone_2Parser.STR_LIT - 102)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 102)) | (1 << (milestone_2Parser.RSTR_LIT - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = milestone_2Parser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_genericParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.symbol()
            self.state = 1194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1189
                    self.comma()
                    self.state = 1190
                    self.symbol() 
                self.state = 1196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1197
                self.colon()
                self.state = 1198
                self.expr()


            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 1202
                self.match(milestone_2Parser.T__2)
                self.state = 1203
                self.optInd()
                self.state = 1204
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(milestone_2Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACK, 0)

        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def semicolon(self):
            return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,0)


        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.GenericParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.GenericParamContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParamList" ):
                listener.enterGenericParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParamList" ):
                listener.exitGenericParamList(self)




    def genericParamList(self):

        localctx = milestone_2Parser.GenericParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_genericParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 1209
            self.optInd()
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT:
                self.state = 1210
                self.genericParam()
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.COMMA]:
                self.state = 1216
                self.comma()
                pass
            elif token in [milestone_2Parser.SEMI_COLON]:
                self.state = 1217
                self.semicolon()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1220
            self.optPar()
            self.state = 1221
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(milestone_2Parser.OPEN_BRACE, 0)

        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(milestone_2Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = milestone_2Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 1224
            self.stmt()
            self.state = 1225
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndAndCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(milestone_2Parser.INDENT, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_indAndComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndAndComment" ):
                listener.enterIndAndComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndAndComment" ):
                listener.exitIndAndComment(self)




    def indAndComment(self):

        localctx = milestone_2Parser.IndAndCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_indAndComment)
        try:
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1227
                    self.match(milestone_2Parser.INDENT)
                    >
                    self.state = 1229
                    self.match(milestone_2Parser.COMMENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1232
                    self.match(milestone_2Parser.COMMENT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def pattern(self):
            return self.getTypedRuleContext(milestone_2Parser.PatternContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = milestone_2Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_routine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.optInd()
            self.state = 1238
            self.identVis()
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1239
                self.pattern()


            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1242
                self.genericParamList()


            self.state = 1245
            self.paramListColon()
            self.state = 1247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1246
                self.pragma()


            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 1249
                self.match(milestone_2Parser.T__2)
                self.state = 1251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1250
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1253
                self.stmt()


            self.state = 1256
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = milestone_2Parser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_commentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(milestone_2Parser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Section_typeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeDefContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeDefContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def DEDENT(self):
            return self.getToken(milestone_2Parser.DEDENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_section_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_typeDef" ):
                listener.enterSection_typeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_typeDef" ):
                listener.exitSection_typeDef(self)




    def section_typeDef(self):

        localctx = milestone_2Parser.Section_typeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_section_typeDef)
        self._la = 0 # Token type
        try:
            self.state = 1275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1, milestone_2Parser.COMMENT, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1260
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1263
                self.typeDef()
                pass
            elif token in [milestone_2Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1264
                self.match(milestone_2Parser.INDENT)
                >
                self.state = 1268 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1268
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.T__1, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                        self.state = 1266
                        self.typeDef()
                        pass
                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1267
                        self.match(milestone_2Parser.COMMENT)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1270 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==milestone_2Parser.T__1 or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (milestone_2Parser.COMMENT - 99)) | (1 << (milestone_2Parser.KEYW - 99)) | (1 << (milestone_2Parser.IDENT - 99)))) != 0)):
                        break

                self.state = 1272
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1274
                self.match(milestone_2Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Section_constantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ConstantContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def DEDENT(self):
            return self.getToken(milestone_2Parser.DEDENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_section_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_constant" ):
                listener.enterSection_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_constant" ):
                listener.exitSection_constant(self)




    def section_constant(self):

        localctx = milestone_2Parser.Section_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_section_constant)
        self._la = 0 # Token type
        try:
            self.state = 1292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1, milestone_2Parser.COMMENT, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1277
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1280
                self.constant()
                pass
            elif token in [milestone_2Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1281
                self.match(milestone_2Parser.INDENT)
                >
                self.state = 1285 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1285
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.T__1, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                        self.state = 1283
                        self.constant()
                        pass
                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1284
                        self.match(milestone_2Parser.COMMENT)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1287 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==milestone_2Parser.T__1 or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (milestone_2Parser.COMMENT - 99)) | (1 << (milestone_2Parser.KEYW - 99)) | (1 << (milestone_2Parser.IDENT - 99)))) != 0)):
                        break

                self.state = 1289
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1291
                self.match(milestone_2Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Section_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.VariableContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.VariableContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def DEDENT(self):
            return self.getToken(milestone_2Parser.DEDENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_section_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_variable" ):
                listener.enterSection_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_variable" ):
                listener.exitSection_variable(self)




    def section_variable(self):

        localctx = milestone_2Parser.Section_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_section_variable)
        self._la = 0 # Token type
        try:
            self.state = 1309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.OPEN_PAREN, milestone_2Parser.COMMENT, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1294
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1297
                self.variable()
                pass
            elif token in [milestone_2Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1298
                self.match(milestone_2Parser.INDENT)
                >
                self.state = 1302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1302
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.OPEN_PAREN, milestone_2Parser.IDENT]:
                        self.state = 1300
                        self.variable()
                        pass
                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1301
                        self.match(milestone_2Parser.COMMENT)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1304 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (milestone_2Parser.OPEN_PAREN - 93)) | (1 << (milestone_2Parser.COMMENT - 93)) | (1 << (milestone_2Parser.IDENT - 93)))) != 0)):
                        break

                self.state = 1306
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1308
                self.match(milestone_2Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = milestone_2Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.identWithPragma()
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1312
                self.colon()
                self.state = 1313
                self.typeDesc()


            self.state = 1317
            self.match(milestone_2Parser.T__2)
            self.state = 1318
            self.optInd()
            self.state = 1319
            self.expr()
            self.state = 1320
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_grammerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(milestone_2Parser.ENUM, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_enum_grammer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_grammer" ):
                listener.enterEnum_grammer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_grammer" ):
                listener.exitEnum_grammer(self)




    def enum_grammer(self):

        localctx = milestone_2Parser.Enum_grammerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_enum_grammer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(milestone_2Parser.ENUM)
            self.state = 1323
            self.optInd()
            self.state = 1337 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1324
                self.symbol()
                self.state = 1325
                self.optInd()
                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__2:
                    self.state = 1326
                    self.match(milestone_2Parser.T__2)
                    self.state = 1327
                    self.optInd()
                    self.state = 1328
                    self.expr()
                    self.state = 1330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMENT:
                        self.state = 1329
                        self.match(milestone_2Parser.COMMENT)




                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 1334
                    self.comma()


                self.state = 1339 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectWhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(milestone_2Parser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.ELIF)
            else:
                return self.getToken(milestone_2Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(milestone_2Parser.ELSE, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectWhen" ):
                listener.enterObjectWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectWhen" ):
                listener.exitObjectWhen(self)




    def objectWhen(self):

        localctx = milestone_2Parser.ObjectWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_objectWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(milestone_2Parser.WHEN)
            self.state = 1342
            self.expr()
            self.state = 1343
            self.colcom()
            self.state = 1344
            self.objectPart()
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1345
                self.match(milestone_2Parser.COMMENT)


            self.state = 1357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1348
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1349
                    self.expr()
                    self.state = 1350
                    self.colcom()
                    self.state = 1351
                    self.objectPart()
                    self.state = 1353
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1352
                        self.match(milestone_2Parser.COMMENT)

             
                self.state = 1359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1360
                self.match(milestone_2Parser.ELSE)
                self.state = 1361
                self.colcom()
                self.state = 1362
                self.objectPart()
                self.state = 1364
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1363
                    self.match(milestone_2Parser.COMMENT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(milestone_2Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranch" ):
                listener.enterObjectBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranch" ):
                listener.exitObjectBranch(self)




    def objectBranch(self):

        localctx = milestone_2Parser.ObjectBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_objectBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(milestone_2Parser.OF)
            self.state = 1369
            self.exprList()
            self.state = 1370
            self.colcom()
            self.state = 1371
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectBranchContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.ELIF)
            else:
                return self.getToken(milestone_2Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def ELSE(self):
            return self.getToken(milestone_2Parser.ELSE, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranches" ):
                listener.enterObjectBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranches" ):
                listener.exitObjectBranches(self)




    def objectBranches(self):

        localctx = milestone_2Parser.ObjectBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_objectBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.objectBranch()
            self.state = 1379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1374
                    self.match(milestone_2Parser.INDENT)
                    =
                    self.state = 1376
                    self.objectBranch() 
                self.state = 1381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

            self.state = 1391
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1382
                    self.match(milestone_2Parser.INDENT)
                    =
                    self.state = 1384
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1385
                    self.expr()
                    self.state = 1386
                    self.colcom()
                    self.state = 1387
                    self.objectPart() 
                self.state = 1393
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1394
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1396
                self.match(milestone_2Parser.ELSE)
                self.state = 1397
                self.colcom()
                self.state = 1398
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(milestone_2Parser.CASE, 0)

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COLON)
            else:
                return self.getToken(milestone_2Parser.COLON, i)

        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def INDENT(self):
            return self.getToken(milestone_2Parser.INDENT, 0)

        def objectBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectBranchesContext,0)


        def DEDENT(self):
            return self.getToken(milestone_2Parser.DEDENT, 0)

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCase" ):
                listener.enterObjectCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCase" ):
                listener.exitObjectCase(self)




    def objectCase(self):

        localctx = milestone_2Parser.ObjectCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_objectCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(milestone_2Parser.CASE)
            self.state = 1403
            self.identWithPragma()
            self.state = 1404
            self.match(milestone_2Parser.COLON)
            self.state = 1405
            self.typeDesc()
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1406
                self.match(milestone_2Parser.COLON)


            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1409
                self.match(milestone_2Parser.COMMENT)


            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1412
                self.match(milestone_2Parser.INDENT)
                >
                self.state = 1414
                self.objectBranches()
                self.state = 1415
                self.match(milestone_2Parser.DEDENT)
                pass

            elif la_ == 2:
                self.state = 1417
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1419
                self.objectBranches()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def DEDENT(self):
            return self.getToken(milestone_2Parser.DEDENT, 0)

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def objectWhen(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectWhenContext,0)


        def objectCase(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectCaseContext,0)


        def NIL(self):
            return self.getToken(milestone_2Parser.NIL, 0)

        def DISCARD(self):
            return self.getToken(milestone_2Parser.DISCARD, 0)

        def declColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPart" ):
                listener.enterObjectPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPart" ):
                listener.exitObjectPart(self)




    def objectPart(self):

        localctx = milestone_2Parser.ObjectPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_objectPart)
        try:
            self.state = 1438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.INDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1422
                self.match(milestone_2Parser.INDENT)
                >
                self.state = 1425 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1424
                        self.objectPart()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1427 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                self.state = 1429
                self.match(milestone_2Parser.INDENT)
                =
                self.state = 1431
                self.match(milestone_2Parser.DEDENT)
                pass
            elif token in [milestone_2Parser.WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1433
                self.objectWhen()
                pass
            elif token in [milestone_2Parser.CASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1434
                self.objectCase()
                pass
            elif token in [milestone_2Parser.NIL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1435
                self.match(milestone_2Parser.NIL)
                pass
            elif token in [milestone_2Parser.DISCARD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1436
                self.match(milestone_2Parser.DISCARD)
                pass
            elif token in [milestone_2Parser.T__1, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1437
                self.declColonEquals()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_gContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(milestone_2Parser.OBJECT, 0)

        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(milestone_2Parser.OF, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_object_g

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_g" ):
                listener.enterObject_g(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_g" ):
                listener.exitObject_g(self)




    def object_g(self):

        localctx = milestone_2Parser.Object_gContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_object_g)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(milestone_2Parser.OBJECT)
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 1441
                self.pragma()


            self.state = 1446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OF:
                self.state = 1444
                self.match(milestone_2Parser.OF)
                self.state = 1445
                self.typeDesc()


            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1448
                self.match(milestone_2Parser.COMMENT)


            self.state = 1451
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def VARIABLE(self):
            return self.getToken(milestone_2Parser.VARIABLE, 0)

        def OUT(self):
            return self.getToken(milestone_2Parser.OUT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClassParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClassParam" ):
                listener.enterTypeClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClassParam" ):
                listener.exitTypeClassParam(self)




    def typeClassParam(self):

        localctx = milestone_2Parser.TypeClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_typeClassParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT:
                self.state = 1453
                _la = self._input.LA(1)
                if not(_la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1456
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMA)
            else:
                return self.getToken(milestone_2Parser.COMMA, i)

        def INDENT(self):
            return self.getToken(milestone_2Parser.INDENT, 0)

        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def typeClassParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeClassParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeClassParamContext,i)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(milestone_2Parser.OF, 0)

        def typeDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeDescContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClass" ):
                listener.enterTypeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClass" ):
                listener.exitTypeClass(self)




    def typeClass(self):

        localctx = milestone_2Parser.TypeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_typeClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.VARIABLE) | (1 << milestone_2Parser.OUT))) != 0) or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT:
                self.state = 1458
                self.typeClassParam()
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1464
            self.match(milestone_2Parser.COMMA)
            self.state = 1466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 1465
                self.pragma()


            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OF:
                self.state = 1468
                self.match(milestone_2Parser.OF)
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.DIV))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (milestone_2Parser.IN - 68)) | (1 << (milestone_2Parser.IS - 68)) | (1 << (milestone_2Parser.ISNOT - 68)) | (1 << (milestone_2Parser.OPEN_BRACE - 68)) | (1 << (milestone_2Parser.OPEN_PAREN - 68)) | (1 << (milestone_2Parser.OPEN_BRACK - 68)) | (1 << (milestone_2Parser.STR_LIT - 68)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 68)) | (1 << (milestone_2Parser.RSTR_LIT - 68)) | (1 << (milestone_2Parser.CHAR_LIT - 68)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 68)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 68)) | (1 << (milestone_2Parser.FLOAT_LIT - 68)) | (1 << (milestone_2Parser.INT_LIT - 68)) | (1 << (milestone_2Parser.INT8_LIT - 68)) | (1 << (milestone_2Parser.INT16_LIT - 68)) | (1 << (milestone_2Parser.INT32_LIT - 68)) | (1 << (milestone_2Parser.INT64_LIT - 68)) | (1 << (milestone_2Parser.UINT_LIT - 68)) | (1 << (milestone_2Parser.UINT8_LIT - 68)) | (1 << (milestone_2Parser.UINT16_LIT - 68)) | (1 << (milestone_2Parser.UINT32_LIT - 68)) | (1 << (milestone_2Parser.UINT64_LIT - 68)) | (1 << (milestone_2Parser.FLOAT32_LIT - 68)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (milestone_2Parser.FLOAT64_LIT - 133)) | (1 << (milestone_2Parser.OP9 - 133)) | (1 << (milestone_2Parser.OP8 - 133)) | (1 << (milestone_2Parser.OP7 - 133)) | (1 << (milestone_2Parser.OP6 - 133)) | (1 << (milestone_2Parser.OP5 - 133)) | (1 << (milestone_2Parser.OP4 - 133)) | (1 << (milestone_2Parser.OP3 - 133)) | (1 << (milestone_2Parser.OP2 - 133)) | (1 << (milestone_2Parser.OP1 - 133)) | (1 << (milestone_2Parser.OP0 - 133)) | (1 << (milestone_2Parser.KEYW - 133)) | (1 << (milestone_2Parser.IDENT - 133)))) != 0):
                    self.state = 1469
                    self.typeDesc()
                    self.state = 1474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1475
                self.match(milestone_2Parser.COMMA)


            self.state = 1478
            self.match(milestone_2Parser.INDENT)
            >
            self.state = 1480
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragmaDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaDotContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDefAux(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDefAuxContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = milestone_2Parser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.identWithPragmaDot()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACK:
                self.state = 1483
                self.genericParamList()


            self.state = 1486
            self.match(milestone_2Parser.T__2)
            self.state = 1487
            self.optInd()
            self.state = 1488
            self.typeDefAux()
            self.state = 1490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1489
                self.indAndComment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(milestone_2Parser.OPEN_PAREN, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(milestone_2Parser.CLOSE_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = milestone_2Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 1493
            self.optInd()
            self.state = 1495 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1494
                self.identWithPragma()
                self.state = 1497 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT):
                    break

            self.state = 1499
            self.comma()
            self.state = 1500
            self.optPar()
            self.state = 1501
            self.match(milestone_2Parser.CLOSE_PAREN)
            self.state = 1502
            self.match(milestone_2Parser.T__2)
            self.state = 1503
            self.optInd()
            self.state = 1504
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def doBlock(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlockContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = milestone_2Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_colonBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.colcom()
            self.state = 1507
            self.stmt()
            self.state = 1509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.DO:
                self.state = 1508
                self.doBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def varTuple(self):
            return self.getTypedRuleContext(milestone_2Parser.VarTupleContext,0)


        def identColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = milestone_2Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.OPEN_PAREN]:
                self.state = 1511
                self.varTuple()
                pass
            elif token in [milestone_2Parser.IDENT]:
                self.state = 1512
                self.identColonEquals()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1515
                self.colonBody()


            self.state = 1518
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIND(self):
            return self.getToken(milestone_2Parser.BIND, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_bindStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindStmt" ):
                listener.enterBindStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindStmt" ):
                listener.exitBindStmt(self)




    def bindStmt(self):

        localctx = milestone_2Parser.BindStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_bindStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(milestone_2Parser.BIND)
            self.state = 1521
            self.optInd()
            self.state = 1523 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1522
                self.qualifiedIdent()
                self.state = 1525 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT):
                    break

            self.state = 1527
            self.comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXIN(self):
            return self.getToken(milestone_2Parser.MIXIN, 0)

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def comma(self):
            return self.getTypedRuleContext(milestone_2Parser.CommaContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_mixinStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinStmt" ):
                listener.enterMixinStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinStmt" ):
                listener.exitMixinStmt(self)




    def mixinStmt(self):

        localctx = milestone_2Parser.MixinStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_mixinStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.match(milestone_2Parser.MIXIN)
            self.state = 1530
            self.optInd()
            self.state = 1532 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1531
                self.qualifiedIdent()
                self.state = 1534 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==milestone_2Parser.T__1 or _la==milestone_2Parser.KEYW or _la==milestone_2Parser.IDENT):
                    break

            self.state = 1536
            self.comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def COLON(self):
            return self.getToken(milestone_2Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = milestone_2Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.pragma()
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1539
                self.match(milestone_2Parser.COLON)
                self.state = 1541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1540
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1543
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprStmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def returnStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ReturnStmtContext,0)


        def raiseStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.RaiseStmtContext,0)


        def yieldStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.YieldStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DiscardStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ContinueStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.FromStmtContext,0)


        def includeStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IncludeStmtContext,0)


        def commentStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CommentStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = milestone_2Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_simpleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__4, milestone_2Parser.BREAK, milestone_2Parser.RAISE, milestone_2Parser.RETURN, milestone_2Parser.YIELD, milestone_2Parser.DISCARD, milestone_2Parser.FROM, milestone_2Parser.IMPORT, milestone_2Parser.INCLUDE, milestone_2Parser.COMMENT]:
                self.state = 1557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1546
                    self.returnStmt()
                    pass

                elif la_ == 2:
                    self.state = 1547
                    self.raiseStmt()
                    pass

                elif la_ == 3:
                    self.state = 1548
                    self.yieldStmt()
                    pass

                elif la_ == 4:
                    self.state = 1549
                    self.discardStmt()
                    pass

                elif la_ == 5:
                    self.state = 1550
                    self.breakStmt()
                    pass

                elif la_ == 6:
                    self.state = 1551
                    self.continueStmt()
                    pass

                elif la_ == 7:
                    self.state = 1552
                    self.pragmaStmt()
                    pass

                elif la_ == 8:
                    self.state = 1553
                    self.importStmt()
                    pass

                elif la_ == 9:
                    self.state = 1554
                    self.fromStmt()
                    pass

                elif la_ == 10:
                    self.state = 1555
                    self.includeStmt()
                    pass

                elif la_ == 11:
                    self.state = 1556
                    self.commentStmt()
                    pass


                pass
            elif token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.AND, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.state = 1559
                self.exprStmt()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1562
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexOrSimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IfStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhenStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhileStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.TryStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BlockStmtContext,0)


        def staticStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StaticStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DeferStmtContext,0)


        def asmStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.AsmStmtContext,0)


        def PROC(self):
            return self.getToken(milestone_2Parser.PROC, 0)

        def routine(self):
            return self.getTypedRuleContext(milestone_2Parser.RoutineContext,0)


        def METHOD(self):
            return self.getToken(milestone_2Parser.METHOD, 0)

        def ITERATOR(self):
            return self.getToken(milestone_2Parser.ITERATOR, 0)

        def MACRO(self):
            return self.getToken(milestone_2Parser.MACRO, 0)

        def TEMPLATE(self):
            return self.getToken(milestone_2Parser.TEMPLATE, 0)

        def CONVERTER(self):
            return self.getToken(milestone_2Parser.CONVERTER, 0)

        def TYPE(self):
            return self.getToken(milestone_2Parser.TYPE, 0)

        def section_typeDef(self):
            return self.getTypedRuleContext(milestone_2Parser.Section_typeDefContext,0)


        def CONST(self):
            return self.getToken(milestone_2Parser.CONST, 0)

        def section_constant(self):
            return self.getTypedRuleContext(milestone_2Parser.Section_constantContext,0)


        def section_variable(self):
            return self.getTypedRuleContext(milestone_2Parser.Section_variableContext,0)


        def bindStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BindStmtContext,0)


        def mixinStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.MixinStmtContext,0)


        def LET(self):
            return self.getToken(milestone_2Parser.LET, 0)

        def VARIABLE(self):
            return self.getToken(milestone_2Parser.VARIABLE, 0)

        def USING(self):
            return self.getToken(milestone_2Parser.USING, 0)

        def simpleStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_complexOrSimpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexOrSimpleStmt" ):
                listener.enterComplexOrSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexOrSimpleStmt" ):
                listener.exitComplexOrSimpleStmt(self)




    def complexOrSimpleStmt(self):

        localctx = milestone_2Parser.ComplexOrSimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_complexOrSimpleStmt)
        self._la = 0 # Token type
        try:
            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [milestone_2Parser.IF]:
                    self.state = 1565
                    self.ifStmt()
                    pass
                elif token in [milestone_2Parser.WHEN]:
                    self.state = 1566
                    self.whenStmt()
                    pass
                elif token in [milestone_2Parser.WHILE]:
                    self.state = 1567
                    self.whileStmt()
                    pass
                elif token in [milestone_2Parser.TRY]:
                    self.state = 1568
                    self.tryStmt()
                    pass
                elif token in [milestone_2Parser.FOR]:
                    self.state = 1569
                    self.forStmt()
                    pass
                elif token in [milestone_2Parser.BLOCK]:
                    self.state = 1570
                    self.blockStmt()
                    pass
                elif token in [milestone_2Parser.STATIC]:
                    self.state = 1571
                    self.staticStmt()
                    pass
                elif token in [milestone_2Parser.DEFER]:
                    self.state = 1572
                    self.deferStmt()
                    pass
                elif token in [milestone_2Parser.ASM]:
                    self.state = 1573
                    self.asmStmt()
                    pass
                elif token in [milestone_2Parser.PROC]:
                    self.state = 1574
                    self.match(milestone_2Parser.PROC)
                    self.state = 1575
                    self.routine()
                    pass
                elif token in [milestone_2Parser.METHOD]:
                    self.state = 1576
                    self.match(milestone_2Parser.METHOD)
                    self.state = 1577
                    self.routine()
                    pass
                elif token in [milestone_2Parser.ITERATOR]:
                    self.state = 1578
                    self.match(milestone_2Parser.ITERATOR)
                    self.state = 1579
                    self.routine()
                    pass
                elif token in [milestone_2Parser.MACRO]:
                    self.state = 1580
                    self.match(milestone_2Parser.MACRO)
                    self.state = 1581
                    self.routine()
                    pass
                elif token in [milestone_2Parser.TEMPLATE]:
                    self.state = 1582
                    self.match(milestone_2Parser.TEMPLATE)
                    self.state = 1583
                    self.routine()
                    pass
                elif token in [milestone_2Parser.CONVERTER]:
                    self.state = 1584
                    self.match(milestone_2Parser.CONVERTER)
                    self.state = 1585
                    self.routine()
                    pass
                elif token in [milestone_2Parser.TYPE]:
                    self.state = 1586
                    self.match(milestone_2Parser.TYPE)
                    self.state = 1587
                    self.section_typeDef()
                    pass
                elif token in [milestone_2Parser.CONST]:
                    self.state = 1588
                    self.match(milestone_2Parser.CONST)
                    self.state = 1589
                    self.section_constant()
                    pass
                elif token in [milestone_2Parser.VARIABLE, milestone_2Parser.USING, milestone_2Parser.LET]:
                    self.state = 1590
                    _la = self._input.LA(1)
                    if not(_la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.USING or _la==milestone_2Parser.LET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1591
                    self.section_variable()
                    pass
                elif token in [milestone_2Parser.BIND]:
                    self.state = 1592
                    self.bindStmt()
                    pass
                elif token in [milestone_2Parser.MIXIN]:
                    self.state = 1593
                    self.mixinStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.simpleStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.INDENT)
            else:
                return self.getToken(milestone_2Parser.INDENT, i)

        def DEDENT(self):
            return self.getToken(milestone_2Parser.DEDENT, 0)

        def SEMI_COLON(self):
            return self.getToken(milestone_2Parser.SEMI_COLON, 0)

        def complexOrSimpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ComplexOrSimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ComplexOrSimpleStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = milestone_2Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [milestone_2Parser.INDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1599
                self.match(milestone_2Parser.INDENT)
                >
                self.state = 1602 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1601
                    self.complexOrSimpleStmt()
                    self.state = 1604 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.VARIABLE) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.ASM) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BLOCK) | (1 << milestone_2Parser.BREAK) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.CONST) | (1 << milestone_2Parser.CONVERTER) | (1 << milestone_2Parser.MACRO) | (1 << milestone_2Parser.METHOD) | (1 << milestone_2Parser.MIXIN) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.PROC) | (1 << milestone_2Parser.RAISE) | (1 << milestone_2Parser.RETURN) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.TEMPLATE) | (1 << milestone_2Parser.TRY) | (1 << milestone_2Parser.TYPE) | (1 << milestone_2Parser.USING) | (1 << milestone_2Parser.WHEN) | (1 << milestone_2Parser.WHILE) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.YIELD) | (1 << milestone_2Parser.DEFER) | (1 << milestone_2Parser.DISCARD) | (1 << milestone_2Parser.DIV) | (1 << milestone_2Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (milestone_2Parser.FROM - 64)) | (1 << (milestone_2Parser.IF - 64)) | (1 << (milestone_2Parser.IMPORT - 64)) | (1 << (milestone_2Parser.IN - 64)) | (1 << (milestone_2Parser.INCLUDE - 64)) | (1 << (milestone_2Parser.IS - 64)) | (1 << (milestone_2Parser.ISNOT - 64)) | (1 << (milestone_2Parser.ITERATOR - 64)) | (1 << (milestone_2Parser.LET - 64)) | (1 << (milestone_2Parser.OPEN_BRACE - 64)) | (1 << (milestone_2Parser.OPEN_PAREN - 64)) | (1 << (milestone_2Parser.OPEN_BRACK - 64)) | (1 << (milestone_2Parser.COMMENT - 64)) | (1 << (milestone_2Parser.STR_LIT - 64)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.RSTR_LIT - 64)) | (1 << (milestone_2Parser.CHAR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.FLOAT_LIT - 64)) | (1 << (milestone_2Parser.INT_LIT - 64)) | (1 << (milestone_2Parser.INT8_LIT - 64)) | (1 << (milestone_2Parser.INT16_LIT - 64)) | (1 << (milestone_2Parser.INT32_LIT - 64)) | (1 << (milestone_2Parser.INT64_LIT - 64)) | (1 << (milestone_2Parser.UINT_LIT - 64)) | (1 << (milestone_2Parser.UINT8_LIT - 64)) | (1 << (milestone_2Parser.UINT16_LIT - 64)) | (1 << (milestone_2Parser.UINT32_LIT - 64)) | (1 << (milestone_2Parser.UINT64_LIT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                        break

                self.state = 1609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [milestone_2Parser.INDENT]:
                    self.state = 1606
                    self.match(milestone_2Parser.INDENT)
                    =
                    pass
                elif token in [milestone_2Parser.SEMI_COLON]:
                    self.state = 1608
                    self.match(milestone_2Parser.SEMI_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1611
                self.match(milestone_2Parser.DEDENT)
                pass
            elif token in [milestone_2Parser.T__0, milestone_2Parser.T__1, milestone_2Parser.T__4, milestone_2Parser.AND, milestone_2Parser.BIND, milestone_2Parser.BREAK, milestone_2Parser.CAST, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.RAISE, milestone_2Parser.RETURN, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.YIELD, milestone_2Parser.DISCARD, milestone_2Parser.DIV, milestone_2Parser.FROM, milestone_2Parser.IMPORT, milestone_2Parser.IN, milestone_2Parser.INCLUDE, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACK, milestone_2Parser.COMMENT, milestone_2Parser.STR_LIT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.KEYW, milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1614 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1613
                    self.simpleStmt()
                    self.state = 1616 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__0) | (1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.BIND) | (1 << milestone_2Parser.BREAK) | (1 << milestone_2Parser.CAST) | (1 << milestone_2Parser.MOD) | (1 << milestone_2Parser.NIL) | (1 << milestone_2Parser.NOT) | (1 << milestone_2Parser.NOTIN) | (1 << milestone_2Parser.OF) | (1 << milestone_2Parser.OR) | (1 << milestone_2Parser.RAISE) | (1 << milestone_2Parser.RETURN) | (1 << milestone_2Parser.SHL) | (1 << milestone_2Parser.SHR) | (1 << milestone_2Parser.STATIC) | (1 << milestone_2Parser.XOR) | (1 << milestone_2Parser.YIELD) | (1 << milestone_2Parser.DISCARD) | (1 << milestone_2Parser.DIV))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (milestone_2Parser.FROM - 64)) | (1 << (milestone_2Parser.IMPORT - 64)) | (1 << (milestone_2Parser.IN - 64)) | (1 << (milestone_2Parser.INCLUDE - 64)) | (1 << (milestone_2Parser.IS - 64)) | (1 << (milestone_2Parser.ISNOT - 64)) | (1 << (milestone_2Parser.OPEN_BRACE - 64)) | (1 << (milestone_2Parser.OPEN_PAREN - 64)) | (1 << (milestone_2Parser.OPEN_BRACK - 64)) | (1 << (milestone_2Parser.COMMENT - 64)) | (1 << (milestone_2Parser.STR_LIT - 64)) | (1 << (milestone_2Parser.TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.RSTR_LIT - 64)) | (1 << (milestone_2Parser.CHAR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_STR_LIT - 64)) | (1 << (milestone_2Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (milestone_2Parser.FLOAT_LIT - 64)) | (1 << (milestone_2Parser.INT_LIT - 64)) | (1 << (milestone_2Parser.INT8_LIT - 64)) | (1 << (milestone_2Parser.INT16_LIT - 64)) | (1 << (milestone_2Parser.INT32_LIT - 64)) | (1 << (milestone_2Parser.INT64_LIT - 64)) | (1 << (milestone_2Parser.UINT_LIT - 64)) | (1 << (milestone_2Parser.UINT8_LIT - 64)) | (1 << (milestone_2Parser.UINT16_LIT - 64)) | (1 << (milestone_2Parser.UINT32_LIT - 64)) | (1 << (milestone_2Parser.UINT64_LIT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)) | (1 << (milestone_2Parser.OP9 - 131)) | (1 << (milestone_2Parser.OP8 - 131)) | (1 << (milestone_2Parser.OP7 - 131)) | (1 << (milestone_2Parser.OP6 - 131)) | (1 << (milestone_2Parser.OP5 - 131)) | (1 << (milestone_2Parser.OP4 - 131)) | (1 << (milestone_2Parser.OP3 - 131)) | (1 << (milestone_2Parser.OP2 - 131)) | (1 << (milestone_2Parser.OP1 - 131)) | (1 << (milestone_2Parser.OP0 - 131)) | (1 << (milestone_2Parser.KEYW - 131)) | (1 << (milestone_2Parser.IDENT - 131)))) != 0)):
                        break

                self.state = 1618
                self.match(milestone_2Parser.SEMI_COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL_OPERATOR(self):
            return self.getToken(milestone_2Parser.MUL_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(milestone_2Parser.DIV_OPERATOR, 0)

        def ADD_OPERATOR(self):
            return self.getToken(milestone_2Parser.ADD_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(milestone_2Parser.MINUS_OPERATOR, 0)

        def OR_OPERATOR(self):
            return self.getToken(milestone_2Parser.OR_OPERATOR, 0)

        def DIV(self):
            return self.getToken(milestone_2Parser.DIV, 0)

        def MOD(self):
            return self.getToken(milestone_2Parser.MOD, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(milestone_2Parser.EQUALS_OPERATOR, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_opr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpr" ):
                listener.enterOpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpr" ):
                listener.exitOpr(self)




    def opr(self):

        localctx = milestone_2Parser.OprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_opr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            _la = self._input.LA(1)
            if not(((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (milestone_2Parser.MOD - 26)) | (1 << (milestone_2Parser.DIV - 26)) | (1 << (milestone_2Parser.EQUALS_OPERATOR - 26)) | (1 << (milestone_2Parser.ADD_OPERATOR - 26)) | (1 << (milestone_2Parser.MINUS_OPERATOR - 26)) | (1 << (milestone_2Parser.MUL_OPERATOR - 26)) | (1 << (milestone_2Parser.DIV_OPERATOR - 26)) | (1 << (milestone_2Parser.OR_OPERATOR - 26)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[82] = self.tryStmt_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def tryStmt_sempred(self, localctx:TryStmtContext, predIndex:int):
            if predIndex == 0:
                return =
         

            if predIndex == 1:
                return =
         

            if predIndex == 2:
                return =
         




